{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "cbaf6c29-b4fb-4c2f-b4af-2129f028b66d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import re\n",
    "\n",
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "e6f609c1-d117-444b-be90-f27097473a11",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_user = pd.read_csv('data/users.csv')\n",
    "df_book = pd.read_csv('data/books.csv')\n",
    "df_train = pd.read_csv('data/train_ratings.csv')\n",
    "df_test = pd.read_csv('data/test_ratings.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "67169495",
   "metadata": {},
   "source": [
    "## user DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ba48daea-c0d9-4f08-8aa5-aa23b41de784",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>timmins, ontario, canada</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11400</td>\n",
       "      <td>ottawa, ontario, canada</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>n/a, n/a, n/a</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>67544</td>\n",
       "      <td>toronto, ontario, canada</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>85526</td>\n",
       "      <td>victoria, british columbia, canada</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id                            location   age\n",
       "0        8            timmins, ontario, canada   NaN\n",
       "1    11400             ottawa, ontario, canada  49.0\n",
       "2    11676                       n/a, n/a, n/a   NaN\n",
       "3    67544            toronto, ontario, canada  30.0\n",
       "4    85526  victoria, british columbia, canada  36.0"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "fd98eaa3-5d59-489f-94bc-7aae3912db9d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    40259.000000\n",
       "mean        36.069873\n",
       "std         13.842571\n",
       "min          5.000000\n",
       "25%         25.000000\n",
       "50%         34.000000\n",
       "75%         45.000000\n",
       "max         99.000000\n",
       "Name: age, dtype: float64"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.age.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "37642ad8-5469-4f35-8ea0-0824fd2d6b2b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "location        0\n",
       "age         27833\n",
       "dtype: int64"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2014ece3-bcc5-482f-a874-13058e9d4911",
   "metadata": {},
   "source": [
    "### user_id"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "e0f870d8-ffa9-4f9f-9854-66db2e4c5492",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(41902, 8266, 17901)"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(df_train.user_id.values) - set(df_test.user_id.values)), len(set(df_test.user_id.values) - set(df_train.user_id.values)), len(set(df_test.user_id.values) & set(df_train.user_id.values))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1296ebc7",
   "metadata": {
    "tags": []
   },
   "source": [
    "### location"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "eb7b0ca7-8f2c-4ff6-8334-5d35fe948f11",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/tmp/ipykernel_52546/1694676599.py:2: FutureWarning: The default value of regex will change from True to False in a future version.\n",
      "  df_user['location'] = df_user['location'].str.replace(r'[^0-9a-z,]','')\n"
     ]
    }
   ],
   "source": [
    "df_user['location'] = df_user['location'].apply(lambda x : x.lower())\n",
    "df_user['location'] = df_user['location'].str.replace(r'[^0-9a-z,]','')\n",
    "\n",
    "df_user['city'] = df_user['location'].apply(lambda x : x.split(',')[0].strip())\n",
    "df_user['state'] = df_user['location'].apply(lambda x : x.split(',')[1].strip())\n",
    "df_user['country'] = df_user['location'].apply(lambda x : x.split(',')[-1].strip())\n",
    "\n",
    "df_user = df_user.replace('', np.nan)\n",
    "df_user = df_user.replace('na', np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "91f55d66-1e58-4eca-b546-25bdc6028e5c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "location        0\n",
       "age         27833\n",
       "city          122\n",
       "state        3254\n",
       "country      2104\n",
       "dtype: int64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "4fcfe825-ed02-45c9-b388-98554a703987",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>na,na,na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>596</th>\n",
       "      <td>241214</td>\n",
       "      <td>desoto,,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>desoto</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>633</th>\n",
       "      <td>271622</td>\n",
       "      <td>malmok,na,aruba</td>\n",
       "      <td>NaN</td>\n",
       "      <td>malmok</td>\n",
       "      <td>NaN</td>\n",
       "      <td>aruba</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>720</th>\n",
       "      <td>8674</td>\n",
       "      <td>singapore,na,singapore</td>\n",
       "      <td>29.0</td>\n",
       "      <td>singapore</td>\n",
       "      <td>NaN</td>\n",
       "      <td>singapore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>732</th>\n",
       "      <td>10570</td>\n",
       "      <td>singapore,na,singapore</td>\n",
       "      <td>NaN</td>\n",
       "      <td>singapore</td>\n",
       "      <td>NaN</td>\n",
       "      <td>singapore</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68008</th>\n",
       "      <td>272386</td>\n",
       "      <td>rotorua,na,newzealand</td>\n",
       "      <td>60.0</td>\n",
       "      <td>rotorua</td>\n",
       "      <td>NaN</td>\n",
       "      <td>newzealand</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68043</th>\n",
       "      <td>274928</td>\n",
       "      <td>lisbon,na,portugal</td>\n",
       "      <td>49.0</td>\n",
       "      <td>lisbon</td>\n",
       "      <td>NaN</td>\n",
       "      <td>portugal</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68052</th>\n",
       "      <td>275874</td>\n",
       "      <td>zrich,na,switzerland</td>\n",
       "      <td>NaN</td>\n",
       "      <td>zrich</td>\n",
       "      <td>NaN</td>\n",
       "      <td>switzerland</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68061</th>\n",
       "      <td>276618</td>\n",
       "      <td>stuttgart,na,germany</td>\n",
       "      <td>NaN</td>\n",
       "      <td>stuttgart</td>\n",
       "      <td>NaN</td>\n",
       "      <td>germany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68063</th>\n",
       "      <td>276660</td>\n",
       "      <td>singapore,na,singapore</td>\n",
       "      <td>15.0</td>\n",
       "      <td>singapore</td>\n",
       "      <td>NaN</td>\n",
       "      <td>singapore</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1851 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id                location   age       city state      country\n",
       "2        11676                na,na,na   NaN        NaN   NaN          NaN\n",
       "596     241214                desoto,,   NaN     desoto   NaN          NaN\n",
       "633     271622         malmok,na,aruba   NaN     malmok   NaN        aruba\n",
       "720       8674  singapore,na,singapore  29.0  singapore   NaN    singapore\n",
       "732      10570  singapore,na,singapore   NaN  singapore   NaN    singapore\n",
       "...        ...                     ...   ...        ...   ...          ...\n",
       "68008   272386   rotorua,na,newzealand  60.0    rotorua   NaN   newzealand\n",
       "68043   274928      lisbon,na,portugal  49.0     lisbon   NaN     portugal\n",
       "68052   275874    zrich,na,switzerland   NaN      zrich   NaN  switzerland\n",
       "68061   276618    stuttgart,na,germany   NaN  stuttgart   NaN      germany\n",
       "68063   276660  singapore,na,singapore  15.0  singapore   NaN    singapore\n",
       "\n",
       "[1851 rows x 6 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cities = df_user[df_user.state.isna()].city.unique()\n",
    "for city in cities :\n",
    "    temp = df_user[df_user.city == city]\n",
    "    index = temp.index\n",
    "    count = temp['state'].value_counts()\n",
    "    if len(count.index) == 1 or (len(count.index) >= 2 and count[0] >= sum(count[1:]) * 9) :\n",
    "        df_user.loc[index, 'state'] = count.index[0]\n",
    "df_user[df_user.state.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "b79bd99c-6201-4a62-99ae-4291a68551d8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>na,na,na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1555</th>\n",
       "      <td>129929</td>\n",
       "      <td>manchester,newhampshire,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>manchester</td>\n",
       "      <td>newhampshire</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1679</th>\n",
       "      <td>146804</td>\n",
       "      <td>na,na,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1879</th>\n",
       "      <td>181316</td>\n",
       "      <td>managua,,</td>\n",
       "      <td>36.0</td>\n",
       "      <td>managua</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977</th>\n",
       "      <td>197882</td>\n",
       "      <td>chesterfield,,</td>\n",
       "      <td>35.0</td>\n",
       "      <td>chesterfield</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66518</th>\n",
       "      <td>192259</td>\n",
       "      <td>grossenseebach,,</td>\n",
       "      <td>36.0</td>\n",
       "      <td>grossenseebach</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66734</th>\n",
       "      <td>253903</td>\n",
       "      <td>kingston,ontario,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kingston</td>\n",
       "      <td>ontario</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66849</th>\n",
       "      <td>247904</td>\n",
       "      <td>brighton,,</td>\n",
       "      <td>57.0</td>\n",
       "      <td>brighton</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67104</th>\n",
       "      <td>218092</td>\n",
       "      <td>na,na,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67515</th>\n",
       "      <td>240438</td>\n",
       "      <td>wilfleinsdorf,niederoesterreich,</td>\n",
       "      <td>16.0</td>\n",
       "      <td>wilfleinsdorf</td>\n",
       "      <td>niederoesterreich</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>396 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id                          location   age            city  \\\n",
       "2        11676                          na,na,na   NaN             NaN   \n",
       "1555    129929          manchester,newhampshire,   NaN      manchester   \n",
       "1679    146804                            na,na,   NaN             NaN   \n",
       "1879    181316                         managua,,  36.0         managua   \n",
       "1977    197882                    chesterfield,,  35.0    chesterfield   \n",
       "...        ...                               ...   ...             ...   \n",
       "66518   192259                  grossenseebach,,  36.0  grossenseebach   \n",
       "66734   253903                 kingston,ontario,   NaN        kingston   \n",
       "66849   247904                        brighton,,  57.0        brighton   \n",
       "67104   218092                            na,na,   NaN             NaN   \n",
       "67515   240438  wilfleinsdorf,niederoesterreich,  16.0   wilfleinsdorf   \n",
       "\n",
       "                   state country  \n",
       "2                    NaN     NaN  \n",
       "1555        newhampshire     NaN  \n",
       "1679                 NaN     NaN  \n",
       "1879                 NaN     NaN  \n",
       "1977                 NaN     NaN  \n",
       "...                  ...     ...  \n",
       "66518                NaN     NaN  \n",
       "66734            ontario     NaN  \n",
       "66849                NaN     NaN  \n",
       "67104                NaN     NaN  \n",
       "67515  niederoesterreich     NaN  \n",
       "\n",
       "[396 rows x 6 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "cities = df_user[df_user.country.isna()].city.unique()\n",
    "for city in cities :\n",
    "    temp = df_user[df_user.city == city]\n",
    "    index = temp.index\n",
    "    count = temp['country'].value_counts()\n",
    "    if len(count.index) == 1 or (len(count.index) >= 2 and count[0] >= sum(count[1:]) * 9) :\n",
    "        df_user.loc[index, 'country'] = count.index[0]\n",
    "df_user[df_user.country.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "c95fe669-95ad-4c10-9ccd-8b91d214583f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>na,na,na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1679</th>\n",
       "      <td>146804</td>\n",
       "      <td>na,na,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1879</th>\n",
       "      <td>181316</td>\n",
       "      <td>managua,,</td>\n",
       "      <td>36.0</td>\n",
       "      <td>managua</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1977</th>\n",
       "      <td>197882</td>\n",
       "      <td>chesterfield,,</td>\n",
       "      <td>35.0</td>\n",
       "      <td>chesterfield</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2183</th>\n",
       "      <td>227295</td>\n",
       "      <td>llanelli,,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>llanelli</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65488</th>\n",
       "      <td>251004</td>\n",
       "      <td>havelock,,</td>\n",
       "      <td>43.0</td>\n",
       "      <td>havelock</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>65725</th>\n",
       "      <td>164051</td>\n",
       "      <td>mexico,,</td>\n",
       "      <td>65.0</td>\n",
       "      <td>mexico</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66518</th>\n",
       "      <td>192259</td>\n",
       "      <td>grossenseebach,,</td>\n",
       "      <td>36.0</td>\n",
       "      <td>grossenseebach</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66849</th>\n",
       "      <td>247904</td>\n",
       "      <td>brighton,,</td>\n",
       "      <td>57.0</td>\n",
       "      <td>brighton</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67104</th>\n",
       "      <td>218092</td>\n",
       "      <td>na,na,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>278 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id          location   age            city state country\n",
       "2        11676          na,na,na   NaN             NaN   NaN     NaN\n",
       "1679    146804            na,na,   NaN             NaN   NaN     NaN\n",
       "1879    181316         managua,,  36.0         managua   NaN     NaN\n",
       "1977    197882    chesterfield,,  35.0    chesterfield   NaN     NaN\n",
       "2183    227295        llanelli,,   NaN        llanelli   NaN     NaN\n",
       "...        ...               ...   ...             ...   ...     ...\n",
       "65488   251004        havelock,,  43.0        havelock   NaN     NaN\n",
       "65725   164051          mexico,,  65.0          mexico   NaN     NaN\n",
       "66518   192259  grossenseebach,,  36.0  grossenseebach   NaN     NaN\n",
       "66849   247904        brighton,,  57.0        brighton   NaN     NaN\n",
       "67104   218092            na,na,   NaN             NaN   NaN     NaN\n",
       "\n",
       "[278 rows x 6 columns]"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "states = df_user[df_user.country.isna()].state.unique()\n",
    "for state in states :\n",
    "    temp = df_user[df_user.state == state]\n",
    "    index = temp.index\n",
    "    count = temp['country'].value_counts()\n",
    "    if len(count.index) == 1 or (len(count.index) >= 2 and count[0] >= sum(count[1:]) * 9) :\n",
    "        df_user.loc[index, 'country'] = count.index[0]\n",
    "df_user[df_user.country.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "29655f97-aff4-4047-b334-adc5c447daa8",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "user_id         0\n",
       "location        0\n",
       "age         27833\n",
       "city          122\n",
       "state        1851\n",
       "country       278\n",
       "dtype: int64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "3b463f5e-8ee7-4610-bfa1-0f6323d35417",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "187"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.country.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f18edfdf-e243-4a28-a449-898c8cc0af1f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['alachua',\n",
       " 'albania',\n",
       " 'alderney',\n",
       " 'andorra',\n",
       " 'angola',\n",
       " 'antarctica',\n",
       " 'argentina',\n",
       " 'aroostook',\n",
       " 'aruba',\n",
       " 'australia',\n",
       " 'austria',\n",
       " 'bahamas',\n",
       " 'bangladesh',\n",
       " 'barbados',\n",
       " 'belgium',\n",
       " 'belize',\n",
       " 'benin',\n",
       " 'bergued',\n",
       " 'bermuda',\n",
       " 'bolivia',\n",
       " 'brazil',\n",
       " 'brunei',\n",
       " 'bulgaria',\n",
       " 'burma',\n",
       " 'c',\n",
       " 'ca',\n",
       " 'cambodia',\n",
       " 'camden',\n",
       " 'cameroon',\n",
       " 'canada',\n",
       " 'cananda',\n",
       " 'capeverde',\n",
       " 'caribbeansea',\n",
       " 'catalunya',\n",
       " 'catalunyaspain',\n",
       " 'caymanislands',\n",
       " 'channelislands',\n",
       " 'chile',\n",
       " 'china',\n",
       " 'colombia',\n",
       " 'costarica',\n",
       " 'croatia',\n",
       " 'cuba',\n",
       " 'cyprus',\n",
       " 'czechrepublic',\n",
       " 'denmark',\n",
       " 'deutschland',\n",
       " 'disgruntledstatesofamerica',\n",
       " 'dominicanrepublic',\n",
       " 'ecuador',\n",
       " 'egypt',\n",
       " 'england',\n",
       " 'espaa',\n",
       " 'estonia',\n",
       " 'euskalherria',\n",
       " 'everywhereandanywhere',\n",
       " 'faraway',\n",
       " 'ferrara',\n",
       " 'fiji',\n",
       " 'finland',\n",
       " 'fortbend',\n",
       " 'france',\n",
       " 'gabon',\n",
       " 'galiza',\n",
       " 'germany',\n",
       " 'ghana',\n",
       " 'greece',\n",
       " 'grenada',\n",
       " 'guam',\n",
       " 'guatemala',\n",
       " 'guernsey',\n",
       " 'guinea',\n",
       " 'hereandthere',\n",
       " 'honduras',\n",
       " 'hongkong',\n",
       " 'hungary',\n",
       " 'iceland',\n",
       " 'india',\n",
       " 'indonesia',\n",
       " 'iran',\n",
       " 'ireland',\n",
       " 'israel',\n",
       " 'italia',\n",
       " 'italy',\n",
       " 'jamaica',\n",
       " 'japan',\n",
       " 'jersey',\n",
       " 'kazakhstan',\n",
       " 'kenya',\n",
       " 'kosovo',\n",
       " 'kuwait',\n",
       " 'labelgique',\n",
       " 'lachineternelle',\n",
       " 'lafrance',\n",
       " 'laos',\n",
       " 'lasuisse',\n",
       " 'latvia',\n",
       " 'lebanon',\n",
       " 'lithuania',\n",
       " 'lkjlj',\n",
       " 'lleida',\n",
       " 'luxembourg',\n",
       " 'macedonia',\n",
       " 'madagascar',\n",
       " 'malaysia',\n",
       " 'malta',\n",
       " 'mauritius',\n",
       " 'mexico',\n",
       " 'moldova',\n",
       " 'monaco',\n",
       " 'mongolia',\n",
       " 'morocco',\n",
       " 'mozambique',\n",
       " 'naontheroad',\n",
       " 'nepal',\n",
       " 'netherlands',\n",
       " 'newzealand',\n",
       " 'niger',\n",
       " 'nigeria',\n",
       " 'norway',\n",
       " 'oman',\n",
       " 'pakistan',\n",
       " 'palau',\n",
       " 'panama',\n",
       " 'papuanewguinea',\n",
       " 'paraguay',\n",
       " 'pender',\n",
       " 'peru',\n",
       " 'philippines',\n",
       " 'phillipines',\n",
       " 'poland',\n",
       " 'portugal',\n",
       " 'puertorico',\n",
       " 'qatar',\n",
       " 'quit',\n",
       " 'republicofpanama',\n",
       " 'romania',\n",
       " 'russia',\n",
       " 'saintlucia',\n",
       " 'saudiarabia',\n",
       " 'scotland',\n",
       " 'shelby',\n",
       " 'singapore',\n",
       " 'slovakia',\n",
       " 'slovenia',\n",
       " 'southafrica',\n",
       " 'southkorea',\n",
       " 'space',\n",
       " 'spain',\n",
       " 'srilanka',\n",
       " 'sthelena',\n",
       " 'stthomasi',\n",
       " 'sweden',\n",
       " 'switzerland',\n",
       " 'taiwan',\n",
       " 'tajikistan',\n",
       " 'tanzania',\n",
       " 'tdzimi',\n",
       " 'thailand',\n",
       " 'theworldtomorrow',\n",
       " 'tobago',\n",
       " 'tonga',\n",
       " 'trinidadandtobago',\n",
       " 'tunisia',\n",
       " 'turkey',\n",
       " 'turkmenistan',\n",
       " 'uae',\n",
       " 'uganda',\n",
       " 'ukraine',\n",
       " 'unitedarabemirates',\n",
       " 'unitedkingdom',\n",
       " 'unitedstaes',\n",
       " 'unitedstates',\n",
       " 'unitedstatesofamerica',\n",
       " 'universe',\n",
       " 'unknown',\n",
       " 'urugua',\n",
       " 'uruguay',\n",
       " 'us',\n",
       " 'usa',\n",
       " 'uzbekistan',\n",
       " 'vanwert',\n",
       " 'venezuela',\n",
       " 'vietnam',\n",
       " 'wales',\n",
       " 'worcester',\n",
       " 'yugoslavia']"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "country_list = sorted(df_user[df_user.country.notnull()].country.unique())\n",
    "country_list"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "79a87cfe-fad7-4db0-b385-867f964b6084",
   "metadata": {},
   "outputs": [],
   "source": [
    "fix_country = {\n",
    "    'usa':['america','usanow', 'unitedsates', 'unitedstaes', 'unitedstate', 'unitedstates', 'unitedstatesofamerica', 'losestadosunidosdenorteamerica', 'ysa', 'us'], \n",
    "    'canada':['usacanada'],\n",
    "    'germany':[],\n",
    "    'unitedkingdom':['scotland', 'usacurrentlylivinginengland', 'uk', 'england', 'wales', ],\n",
    "    'australia':['australiancapitalterritory'],\n",
    "    'spain':[],\n",
    "    'france':[],\n",
    "    'italy':['italia'],\n",
    "    'newzealand':[],\n",
    "    'switzerland':[],\n",
    "    'netherlands':[],\n",
    "    'portugal':[],\n",
    "    'austria':[],\n",
    "    'malaysia':[],\n",
    "    'singapore':[],\n",
    "    'sweden':[],\n",
    "    'ireland':[],\n",
    "    'belgium':[],\n",
    "    'brazil':[],\n",
    "    'finland':[],\n",
    "    'philippines':['philippines'],\n",
    "    'argentina':[],\n",
    "    'japan':[],\n",
    "    'mexico':[],\n",
    "    'denmark':[],\n",
    "    'netherlands' : ['deutschland'],\n",
    "    'panama' : ['republicofpanama']\n",
    "    }"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "2ebedbbe-dcc9-4838-9bcf-e841e4e13273",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user_id, location, age, city, state, country]\n",
       "Index: []"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for key, value in fix_country.items() :\n",
    "    if len(value) >= 1 :\n",
    "        for v in value :\n",
    "            df_user['country'] = df_user['country'].replace(v, key)\n",
    "df_user[df_user.country == 'america']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "20a01f9f-9939-4609-9410-7e1e71b96a39",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(['usa',\n",
       "  'canada',\n",
       "  'germany',\n",
       "  'unitedkingdom',\n",
       "  'australia',\n",
       "  'spain',\n",
       "  'italy',\n",
       "  'france',\n",
       "  'newzealand',\n",
       "  'switzerland',\n",
       "  'netherlands',\n",
       "  'portugal',\n",
       "  'austria',\n",
       "  'malaysia',\n",
       "  'singapore',\n",
       "  'sweden',\n",
       "  'ireland',\n",
       "  'belgium',\n",
       "  'brazil',\n",
       "  'finland',\n",
       "  'philippines',\n",
       "  'argentina',\n",
       "  'japan',\n",
       "  'mexico',\n",
       "  'denmark',\n",
       "  'norway',\n",
       "  'israel',\n",
       "  'southafrica',\n",
       "  'romania',\n",
       "  'india',\n",
       "  'china',\n",
       "  'southkorea',\n",
       "  'poland',\n",
       "  'greece',\n",
       "  'hongkong',\n",
       "  'luxembourg',\n",
       "  'turkey'],\n",
       " 67369,\n",
       " 445)"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count = 0\n",
    "coverage = 20\n",
    "countries = df_user.country.value_counts()\n",
    "data = []\n",
    "for key, value in countries.to_dict().items() :\n",
    "    if value >= coverage :\n",
    "        count += 1\n",
    "        data.append(key)\n",
    "data, sum(countries[:count]), sum(countries[count:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "0816edab-06c3-4b7e-8dd8-697a116e438e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>timmins,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>timmins</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11400</td>\n",
       "      <td>ottawa,ontario,canada</td>\n",
       "      <td>49.0</td>\n",
       "      <td>ottawa</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>na,na,na</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>67544</td>\n",
       "      <td>toronto,ontario,canada</td>\n",
       "      <td>30.0</td>\n",
       "      <td>toronto</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>85526</td>\n",
       "      <td>victoria,britishcolumbia,canada</td>\n",
       "      <td>36.0</td>\n",
       "      <td>victoria</td>\n",
       "      <td>britishcolumbia</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id                         location   age      city            state  \\\n",
       "0        8           timmins,ontario,canada   NaN   timmins          ontario   \n",
       "1    11400            ottawa,ontario,canada  49.0    ottawa          ontario   \n",
       "2    11676                         na,na,na   NaN   unknown          unknown   \n",
       "3    67544           toronto,ontario,canada  30.0   toronto          ontario   \n",
       "4    85526  victoria,britishcolumbia,canada  36.0  victoria  britishcolumbia   \n",
       "\n",
       "  country  \n",
       "0  canada  \n",
       "1  canada  \n",
       "2  others  \n",
       "3  canada  \n",
       "4  canada  "
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user['city'] = df_user['city'].fillna('unknown')\n",
    "df_user['state'] = df_user['state'].fillna('unknown')\n",
    "#df_user['country'] = df_user['country'].fillna('unknown')\n",
    "df_user['country'] = df_user['country'].apply(lambda x : x if x in data else 'others')\n",
    "df_user.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "32037684-25ed-4d1d-b789-a58f3cd7b895",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user_id, location, age, city, state, country]\n",
       "Index: []"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user[(df_user.country == 'unknown') & (df_user.state != 'unknown')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "38779bbf-b8e3-4d3a-a56d-192c0f649265",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "usa              45577\n",
       "canada            6462\n",
       "germany           3617\n",
       "unitedkingdom     2985\n",
       "australia         1848\n",
       "spain             1683\n",
       "italy              819\n",
       "france             816\n",
       "others             723\n",
       "newzealand         470\n",
       "switzerland        457\n",
       "netherlands        423\n",
       "portugal           334\n",
       "austria            251\n",
       "malaysia           173\n",
       "singapore          134\n",
       "sweden             121\n",
       "ireland            112\n",
       "belgium            106\n",
       "brazil             102\n",
       "finland             93\n",
       "philippines         81\n",
       "argentina           76\n",
       "japan               75\n",
       "mexico              69\n",
       "denmark             64\n",
       "norway              55\n",
       "israel              49\n",
       "southafrica         41\n",
       "india               39\n",
       "romania             39\n",
       "china               35\n",
       "southkorea          31\n",
       "poland              28\n",
       "greece              27\n",
       "hongkong            27\n",
       "luxembourg          27\n",
       "turkey              23\n",
       "Name: country, dtype: int64"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.country.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "70eee8c6-cc81-4ad8-b790-f84fef949c77",
   "metadata": {},
   "source": [
    "### age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "cef54c67-e0d5-4292-aad8-a9d0a09819f9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>isbn</th>\n",
       "      <th>rating</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>0002005018</td>\n",
       "      <td>4</td>\n",
       "      <td>timmins,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>timmins</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>67544</td>\n",
       "      <td>0002005018</td>\n",
       "      <td>7</td>\n",
       "      <td>toronto,ontario,canada</td>\n",
       "      <td>30.0</td>\n",
       "      <td>toronto</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>123629</td>\n",
       "      <td>0002005018</td>\n",
       "      <td>8</td>\n",
       "      <td>kingston,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kingston</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>200273</td>\n",
       "      <td>0002005018</td>\n",
       "      <td>8</td>\n",
       "      <td>comber,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comber</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>210926</td>\n",
       "      <td>0002005018</td>\n",
       "      <td>9</td>\n",
       "      <td>guelph,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>guelph</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id        isbn  rating                 location   age      city  \\\n",
       "0        8  0002005018       4   timmins,ontario,canada   NaN   timmins   \n",
       "1    67544  0002005018       7   toronto,ontario,canada  30.0   toronto   \n",
       "2   123629  0002005018       8  kingston,ontario,canada   NaN  kingston   \n",
       "3   200273  0002005018       8    comber,ontario,canada   NaN    comber   \n",
       "4   210926  0002005018       9    guelph,ontario,canada   NaN    guelph   \n",
       "\n",
       "     state country    book_title           book_author  year_of_publication  \\\n",
       "0  ontario  canada  Clara Callan  Richard Bruce Wright               2001.0   \n",
       "1  ontario  canada  Clara Callan  Richard Bruce Wright               2001.0   \n",
       "2  ontario  canada  Clara Callan  Richard Bruce Wright               2001.0   \n",
       "3  ontario  canada  Clara Callan  Richard Bruce Wright               2001.0   \n",
       "4  ontario  canada  Clara Callan  Richard Bruce Wright               2001.0   \n",
       "\n",
       "               publisher                                            img_url  \\\n",
       "0  HarperFlamingo Canada  http://images.amazon.com/images/P/0002005018.0...   \n",
       "1  HarperFlamingo Canada  http://images.amazon.com/images/P/0002005018.0...   \n",
       "2  HarperFlamingo Canada  http://images.amazon.com/images/P/0002005018.0...   \n",
       "3  HarperFlamingo Canada  http://images.amazon.com/images/P/0002005018.0...   \n",
       "4  HarperFlamingo Canada  http://images.amazon.com/images/P/0002005018.0...   \n",
       "\n",
       "  language       category                                            summary  \\\n",
       "0       en  ['Actresses']  In a small town in Canada, Clara Callan reluct...   \n",
       "1       en  ['Actresses']  In a small town in Canada, Clara Callan reluct...   \n",
       "2       en  ['Actresses']  In a small town in Canada, Clara Callan reluct...   \n",
       "3       en  ['Actresses']  In a small town in Canada, Clara Callan reluct...   \n",
       "4       en  ['Actresses']  In a small town in Canada, Clara Callan reluct...   \n",
       "\n",
       "                            img_path  \n",
       "0  images/0002005018.01.THUMBZZZ.jpg  \n",
       "1  images/0002005018.01.THUMBZZZ.jpg  \n",
       "2  images/0002005018.01.THUMBZZZ.jpg  \n",
       "3  images/0002005018.01.THUMBZZZ.jpg  \n",
       "4  images/0002005018.01.THUMBZZZ.jpg  "
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#df_merge = pd.concat([df_train, df_test])\n",
    "df_merge = pd.merge(df_train, df_user, on='user_id')\n",
    "df_merge = pd.merge(df_merge, df_book, on='isbn')\n",
    "df_merge.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "18815157-7dad-4e53-a877-19447f6b6dc9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>timmins,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>timmins</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>123629</td>\n",
       "      <td>kingston,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>kingston</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>200273</td>\n",
       "      <td>comber,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>comber</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50</th>\n",
       "      <td>248583</td>\n",
       "      <td>vancouver,britishcolumbia,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>vancouver</td>\n",
       "      <td>britishcolumbia</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>98499</td>\n",
       "      <td>toronto,ontario,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>toronto</td>\n",
       "      <td>ontario</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68074</th>\n",
       "      <td>277479</td>\n",
       "      <td>mauldin,southcarolina,usa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>mauldin</td>\n",
       "      <td>southcarolina</td>\n",
       "      <td>usa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68075</th>\n",
       "      <td>277514</td>\n",
       "      <td>munic,na,germany</td>\n",
       "      <td>NaN</td>\n",
       "      <td>munic</td>\n",
       "      <td>bayern</td>\n",
       "      <td>germany</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68084</th>\n",
       "      <td>278248</td>\n",
       "      <td>na,manitoba,canada</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>manitoba</td>\n",
       "      <td>canada</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68085</th>\n",
       "      <td>278260</td>\n",
       "      <td>burlington,massachusetts,usa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>burlington</td>\n",
       "      <td>massachusetts</td>\n",
       "      <td>usa</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68089</th>\n",
       "      <td>278636</td>\n",
       "      <td>irvington,alabama,usa</td>\n",
       "      <td>NaN</td>\n",
       "      <td>irvington</td>\n",
       "      <td>alabama</td>\n",
       "      <td>usa</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>14278 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id                          location  age        city  \\\n",
       "0            8            timmins,ontario,canada  NaN     timmins   \n",
       "7       123629           kingston,ontario,canada  NaN    kingston   \n",
       "9       200273             comber,ontario,canada  NaN      comber   \n",
       "50      248583  vancouver,britishcolumbia,canada  NaN   vancouver   \n",
       "57       98499            toronto,ontario,canada  NaN     toronto   \n",
       "...        ...                               ...  ...         ...   \n",
       "68074   277479         mauldin,southcarolina,usa  NaN     mauldin   \n",
       "68075   277514                  munic,na,germany  NaN       munic   \n",
       "68084   278248                na,manitoba,canada  NaN     unknown   \n",
       "68085   278260      burlington,massachusetts,usa  NaN  burlington   \n",
       "68089   278636             irvington,alabama,usa  NaN   irvington   \n",
       "\n",
       "                 state  country  \n",
       "0              ontario   canada  \n",
       "7              ontario   canada  \n",
       "9              ontario   canada  \n",
       "50     britishcolumbia   canada  \n",
       "57             ontario   canada  \n",
       "...                ...      ...  \n",
       "68074    southcarolina      usa  \n",
       "68075           bayern  germany  \n",
       "68084         manitoba   canada  \n",
       "68085    massachusetts      usa  \n",
       "68089          alabama      usa  \n",
       "\n",
       "[14278 rows x 6 columns]"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_merge_group_sum = df_merge.groupby('isbn')['age'].sum()\n",
    "df_merge_group_count = df_merge.groupby('isbn')['age'].count()\n",
    "null_age = df_user[df_user.age.isna()].index\n",
    "coverage = 5\n",
    "for index in null_age :\n",
    "    user_id = df_user.loc[index, 'user_id']\n",
    "    isbn = df_merge[df_merge.user_id == user_id].isbn.values\n",
    "    nums = [0, 0]\n",
    "    for i in isbn :\n",
    "        if df_merge_group_count[i] >= coverage :\n",
    "            nums[0] += df_merge_group_sum[i]\n",
    "            nums[1] += df_merge_group_count[i]\n",
    "    \n",
    "    if nums[1] >= 1 :\n",
    "        df_user.loc[index, 'age'] = round(nums[0] / nums[1])\n",
    "df_user[df_user.age.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "24f3edd9-82a1-424f-a1d7-ba6773184c61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2962</th>\n",
       "      <td>22255</td>\n",
       "      <td>koror,melekeok,palau</td>\n",
       "      <td>NaN</td>\n",
       "      <td>koror</td>\n",
       "      <td>melekeok</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6779</th>\n",
       "      <td>245698</td>\n",
       "      <td>somewhere,,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>somewhere</td>\n",
       "      <td>unknown</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8168</th>\n",
       "      <td>117390</td>\n",
       "      <td>newalla,,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>newalla</td>\n",
       "      <td>unknown</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10437</th>\n",
       "      <td>9034</td>\n",
       "      <td>santiago,regionmetropolitana,chile</td>\n",
       "      <td>NaN</td>\n",
       "      <td>santiago</td>\n",
       "      <td>regionmetropolitana</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12375</th>\n",
       "      <td>240461</td>\n",
       "      <td>sofia,na,bulgaria</td>\n",
       "      <td>NaN</td>\n",
       "      <td>sofia</td>\n",
       "      <td>unknown</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66122</th>\n",
       "      <td>261873</td>\n",
       "      <td>budapest,na,hungary</td>\n",
       "      <td>NaN</td>\n",
       "      <td>budapest</td>\n",
       "      <td>unknown</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66214</th>\n",
       "      <td>181184</td>\n",
       "      <td>tphcm,saigon,vietnam</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tphcm</td>\n",
       "      <td>saigon</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>66290</th>\n",
       "      <td>183803</td>\n",
       "      <td>tehran,tehran,iran</td>\n",
       "      <td>NaN</td>\n",
       "      <td>tehran</td>\n",
       "      <td>tehran</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67104</th>\n",
       "      <td>218092</td>\n",
       "      <td>na,na,</td>\n",
       "      <td>NaN</td>\n",
       "      <td>unknown</td>\n",
       "      <td>unknown</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67135</th>\n",
       "      <td>219433</td>\n",
       "      <td>skopje,skopje,macedonia</td>\n",
       "      <td>NaN</td>\n",
       "      <td>skopje</td>\n",
       "      <td>skopje</td>\n",
       "      <td>others</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>163 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id                            location  age       city  \\\n",
       "2962     22255                koror,melekeok,palau  NaN      koror   \n",
       "6779    245698                         somewhere,,  NaN  somewhere   \n",
       "8168    117390                           newalla,,  NaN    newalla   \n",
       "10437     9034  santiago,regionmetropolitana,chile  NaN   santiago   \n",
       "12375   240461                   sofia,na,bulgaria  NaN      sofia   \n",
       "...        ...                                 ...  ...        ...   \n",
       "66122   261873                 budapest,na,hungary  NaN   budapest   \n",
       "66214   181184                tphcm,saigon,vietnam  NaN      tphcm   \n",
       "66290   183803                  tehran,tehran,iran  NaN     tehran   \n",
       "67104   218092                              na,na,  NaN    unknown   \n",
       "67135   219433             skopje,skopje,macedonia  NaN     skopje   \n",
       "\n",
       "                     state country  \n",
       "2962              melekeok  others  \n",
       "6779               unknown  others  \n",
       "8168               unknown  others  \n",
       "10437  regionmetropolitana  others  \n",
       "12375              unknown  others  \n",
       "...                    ...     ...  \n",
       "66122              unknown  others  \n",
       "66214               saigon  others  \n",
       "66290               tehran  others  \n",
       "67104              unknown  others  \n",
       "67135               skopje  others  \n",
       "\n",
       "[163 rows x 6 columns]"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_age = df_user[df_user.age.isna()].index\n",
    "country_group = df_user.groupby('country')['age'].mean()\n",
    "for i in null_age :\n",
    "    country = df_user.loc[i, 'country']\n",
    "    if pd.isnull(country) or country == 'others' or country == 'unknown' :\n",
    "        continue\n",
    "    num = country_group[country]\n",
    "    if not pd.isnull(num) :\n",
    "        df_user.loc[i, 'age'] = round(country_group[country])\n",
    "df_user[df_user.age.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "de0c8f57-5cec-49b8-a793-9b394e6922d7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "      <th>city</th>\n",
       "      <th>state</th>\n",
       "      <th>country</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user_id, location, age, city, state, country]\n",
       "Index: []"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.age.fillna(round(df_user.age.mean()), inplace=True)\n",
    "df_user[df_user.age.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "id": "b651a65c-1b59-49da-af46-b5cb38eea2d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    68092.000000\n",
       "mean        36.379002\n",
       "std         10.933986\n",
       "min          5.000000\n",
       "25%         30.000000\n",
       "50%         37.000000\n",
       "75%         40.000000\n",
       "max         99.000000\n",
       "Name: age, dtype: float64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.age.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "fc94931e-524e-4445-bedf-a82a97bc222e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0       74\n",
       "1.0     3984\n",
       "2.0    11944\n",
       "3.0    33890\n",
       "4.0    10468\n",
       "5.0     5123\n",
       "6.0     2029\n",
       "7.0      511\n",
       "8.0       57\n",
       "9.0       12\n",
       "Name: age, dtype: int64"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.age.apply(lambda x : x//10).value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "7a47662e-cb22-41ed-ad22-9a52a38a9a3b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>timmins, ontario, canada</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11400</td>\n",
       "      <td>ottawa, ontario, canada</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>unknown, unknown, others</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>67544</td>\n",
       "      <td>toronto, ontario, canada</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>85526</td>\n",
       "      <td>victoria, britishcolumbia, canada</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68087</th>\n",
       "      <td>278376</td>\n",
       "      <td>danville, pennsylvania, usa</td>\n",
       "      <td>54.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68088</th>\n",
       "      <td>278621</td>\n",
       "      <td>victoria, britishcolumbia, canada</td>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68089</th>\n",
       "      <td>278636</td>\n",
       "      <td>irvington, alabama, usa</td>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68090</th>\n",
       "      <td>278659</td>\n",
       "      <td>vancouver, washington, usa</td>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>68091</th>\n",
       "      <td>278713</td>\n",
       "      <td>albuquerque, newmexico, usa</td>\n",
       "      <td>63.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>68092 rows × 3 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       user_id                           location   age\n",
       "0            8           timmins, ontario, canada  36.0\n",
       "1        11400            ottawa, ontario, canada  49.0\n",
       "2        11676           unknown, unknown, others  37.0\n",
       "3        67544           toronto, ontario, canada  30.0\n",
       "4        85526  victoria, britishcolumbia, canada  36.0\n",
       "...        ...                                ...   ...\n",
       "68087   278376        danville, pennsylvania, usa  54.0\n",
       "68088   278621  victoria, britishcolumbia, canada  74.0\n",
       "68089   278636            irvington, alabama, usa  38.0\n",
       "68090   278659         vancouver, washington, usa  33.0\n",
       "68091   278713        albuquerque, newmexico, usa  63.0\n",
       "\n",
       "[68092 rows x 3 columns]"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user['location'] = df_user['city'] + ', ' + df_user['state'] + ', ' + df_user['country']\n",
    "df_user.drop('city', axis=1, inplace=True)\n",
    "df_user.drop('state', axis=1, inplace=True)\n",
    "df_user.drop('country', axis=1, inplace=True)\n",
    "df_user"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "185af695-95a2-4f19-8b89-94eb25a2c18b",
   "metadata": {},
   "source": [
    "## books DataFrame"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "3b06e728-471c-4b5d-a403-f2987fbd2bf2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0002005018</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0060973129</td>\n",
       "      <td>Decision in Normandy</td>\n",
       "      <td>Carlo D'Este</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>HarperPerennial</td>\n",
       "      <td>http://images.amazon.com/images/P/0060973129.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['1940-1949']</td>\n",
       "      <td>Here, for the first time in paperback, is an o...</td>\n",
       "      <td>images/0060973129.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0374157065</td>\n",
       "      <td>Flu: The Story of the Great Influenza Pandemic...</td>\n",
       "      <td>Gina Bari Kolata</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>Farrar Straus Giroux</td>\n",
       "      <td>http://images.amazon.com/images/P/0374157065.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Medical']</td>\n",
       "      <td>Describes the great flu epidemic of 1918, an o...</td>\n",
       "      <td>images/0374157065.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0399135782</td>\n",
       "      <td>The Kitchen God's Wife</td>\n",
       "      <td>Amy Tan</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>Putnam Pub Group</td>\n",
       "      <td>http://images.amazon.com/images/P/0399135782.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Fiction']</td>\n",
       "      <td>A Chinese immigrant who is convinced she is dy...</td>\n",
       "      <td>images/0399135782.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0425176428</td>\n",
       "      <td>What If?: The World's Foremost Military Histor...</td>\n",
       "      <td>Robert Cowley</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Berkley Publishing Group</td>\n",
       "      <td>http://images.amazon.com/images/P/0425176428.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['History']</td>\n",
       "      <td>Essays by respected military historians, inclu...</td>\n",
       "      <td>images/0425176428.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         isbn                                         book_title  \\\n",
       "0  0002005018                                       Clara Callan   \n",
       "1  0060973129                               Decision in Normandy   \n",
       "2  0374157065  Flu: The Story of the Great Influenza Pandemic...   \n",
       "3  0399135782                             The Kitchen God's Wife   \n",
       "4  0425176428  What If?: The World's Foremost Military Histor...   \n",
       "\n",
       "            book_author  year_of_publication                 publisher  \\\n",
       "0  Richard Bruce Wright               2001.0     HarperFlamingo Canada   \n",
       "1          Carlo D'Este               1991.0           HarperPerennial   \n",
       "2      Gina Bari Kolata               1999.0      Farrar Straus Giroux   \n",
       "3               Amy Tan               1991.0          Putnam Pub Group   \n",
       "4         Robert Cowley               2000.0  Berkley Publishing Group   \n",
       "\n",
       "                                             img_url language       category  \\\n",
       "0  http://images.amazon.com/images/P/0002005018.0...       en  ['Actresses']   \n",
       "1  http://images.amazon.com/images/P/0060973129.0...       en  ['1940-1949']   \n",
       "2  http://images.amazon.com/images/P/0374157065.0...       en    ['Medical']   \n",
       "3  http://images.amazon.com/images/P/0399135782.0...       en    ['Fiction']   \n",
       "4  http://images.amazon.com/images/P/0425176428.0...       en    ['History']   \n",
       "\n",
       "                                             summary  \\\n",
       "0  In a small town in Canada, Clara Callan reluct...   \n",
       "1  Here, for the first time in paperback, is an o...   \n",
       "2  Describes the great flu epidemic of 1918, an o...   \n",
       "3  A Chinese immigrant who is convinced she is dy...   \n",
       "4  Essays by respected military historians, inclu...   \n",
       "\n",
       "                            img_path  \n",
       "0  images/0002005018.01.THUMBZZZ.jpg  \n",
       "1  images/0060973129.01.THUMBZZZ.jpg  \n",
       "2  images/0374157065.01.THUMBZZZ.jpg  \n",
       "3  images/0399135782.01.THUMBZZZ.jpg  \n",
       "4  images/0425176428.01.THUMBZZZ.jpg  "
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "8e81ff8d-7858-4cf7-90a2-ea9e3cd67994",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "isbn                       0\n",
       "book_title                 0\n",
       "book_author                0\n",
       "year_of_publication        0\n",
       "publisher                  0\n",
       "img_url                    0\n",
       "language               67227\n",
       "category               68851\n",
       "summary                67227\n",
       "img_path                   0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d79a435d-5280-4901-99fc-07d863da7e91",
   "metadata": {},
   "source": [
    "### isbn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "693e6630-ea82-4702-b641-e34534456c67",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(97570, 19793, 32207)"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "len(set(df_train.isbn) - set(df_test.isbn)), len(set(df_test.isbn) - set(df_train.isbn)), len(set(df_train.isbn) & set(df_test.isbn))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "a01ebc1b-7082-4ee9-958d-97ec6f224c06",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['00', '03', '04', '06', '07', '08', '15', '18', '09', '05', '34',\n",
       "       '01', '02', '20', '14', '84', '97', '19', '31', '32', '35', '96',\n",
       "       '88', '22', '28', '29', '37', '38', '95', '27', '47', 'B0', '85',\n",
       "       '99', '39', '36', '98', '33', '55', '86', '90', '83', '17', '30',\n",
       "       '80', '81', '91', '50', '82', '21', '25', '87', '89', '92', '54',\n",
       "       '71', '53', '48', '78', '58', '49', '26', '75', '45', '43', '40',\n",
       "       '41', '44', '46'], dtype=object)"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book['code'] = df_book['isbn'].apply(lambda x : x[:2])\n",
    "df_book.code.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "f9af084f-8733-4974-b983-321ada20d193",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array(['00', '03', '04', '07', '08', '15', '18', '06', '09', '05', '34',\n",
       "       '01', '20', '14', '84', '97', '31', '32', '35', '19', '96', '88',\n",
       "       '22', '28', '29', '38', '37', '02', '95', '27', '47', 'B0', '85',\n",
       "       '99', '39', '36', '33', '55', '98', '86', '90', '17', '30', '80',\n",
       "       '81', '82', '91', '21', '25', '87', '89', '92', '54', '83', '71',\n",
       "       '53', '50', '48', '78', '58', '49', '26', '45', '43', '40', '41',\n",
       "       '44'], dtype=object)"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_train.isbn.apply(lambda x : x[:2]).unique()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c52c5ed7-3710-40e8-b7bf-0fbe6d992039",
   "metadata": {},
   "source": [
    "### book_title"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "6a650c61-cdf9-4c57-82d3-28aa3d2adf0d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "135436"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.book_title.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "9bea0fac-8981-4e2e-8da8-85ec617d6a0e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "24289 125281\n"
     ]
    }
   ],
   "source": [
    "count = df_book.book_title.value_counts()\n",
    "for index, value in enumerate(count) :\n",
    "    if value == 1 :\n",
    "        break\n",
    "print(sum(count[:index]) , sum(count[index:]))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "6a2ff7d7-c41a-44e5-a741-3d1f2b187c60",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "      <th>code</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0002005018</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>Richard Bruce Wright</td>\n",
       "      <td>2001.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Actresses']</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0060973129</td>\n",
       "      <td>Decision in Normandy</td>\n",
       "      <td>Carlo D'Este</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>HarperPerennial</td>\n",
       "      <td>http://images.amazon.com/images/P/0060973129.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['1940-1949']</td>\n",
       "      <td>Here, for the first time in paperback, is an o...</td>\n",
       "      <td>images/0060973129.01.THUMBZZZ.jpg</td>\n",
       "      <td>00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0374157065</td>\n",
       "      <td>Flu: The Story of the Great Influenza Pandemic...</td>\n",
       "      <td>Gina Bari Kolata</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>Farrar Straus Giroux</td>\n",
       "      <td>http://images.amazon.com/images/P/0374157065.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Medical']</td>\n",
       "      <td>Describes the great flu epidemic of 1918, an o...</td>\n",
       "      <td>images/0374157065.01.THUMBZZZ.jpg</td>\n",
       "      <td>03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0399135782</td>\n",
       "      <td>The Kitchen God's Wife</td>\n",
       "      <td>Amy Tan</td>\n",
       "      <td>1991.0</td>\n",
       "      <td>Putnam Pub Group</td>\n",
       "      <td>http://images.amazon.com/images/P/0399135782.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Fiction']</td>\n",
       "      <td>A Chinese immigrant who is convinced she is dy...</td>\n",
       "      <td>images/0399135782.01.THUMBZZZ.jpg</td>\n",
       "      <td>03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0425176428</td>\n",
       "      <td>What If?: The World's Foremost Military Histor...</td>\n",
       "      <td>Robert Cowley</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Berkley Publishing Group</td>\n",
       "      <td>http://images.amazon.com/images/P/0425176428.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['History']</td>\n",
       "      <td>Essays by respected military historians, inclu...</td>\n",
       "      <td>images/0425176428.01.THUMBZZZ.jpg</td>\n",
       "      <td>04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0671870432</td>\n",
       "      <td>PLEADING GUILTY</td>\n",
       "      <td>Scott Turow</td>\n",
       "      <td>1993.0</td>\n",
       "      <td>Audioworks</td>\n",
       "      <td>http://images.amazon.com/images/P/0671870432.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PLEADING GUILTY</td>\n",
       "      <td>images/0671870432.01.THUMBZZZ.jpg</td>\n",
       "      <td>06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>074322678X</td>\n",
       "      <td>Where You'll Find Me: And Other Stories</td>\n",
       "      <td>Ann Beattie</td>\n",
       "      <td>2002.0</td>\n",
       "      <td>Scribner</td>\n",
       "      <td>http://images.amazon.com/images/P/074322678X.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Fiction']</td>\n",
       "      <td>Now back in print, Ann Beattie&amp;#39;s finest sh...</td>\n",
       "      <td>images/074322678X.01.THUMBZZZ.jpg</td>\n",
       "      <td>07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0771074670</td>\n",
       "      <td>Nights Below Station Street</td>\n",
       "      <td>David Adams Richards</td>\n",
       "      <td>1988.0</td>\n",
       "      <td>Emblem Editions</td>\n",
       "      <td>http://images.amazon.com/images/P/0771074670.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>['Fiction']</td>\n",
       "      <td>Another story based in the fictional rural tow...</td>\n",
       "      <td>images/0771074670.01.THUMBZZZ.jpg</td>\n",
       "      <td>07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0887841740</td>\n",
       "      <td>The Middle Stories</td>\n",
       "      <td>Sheila Heti</td>\n",
       "      <td>2004.0</td>\n",
       "      <td>House of Anansi Press</td>\n",
       "      <td>http://images.amazon.com/images/P/0887841740.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Middle Stories</td>\n",
       "      <td>images/0887841740.01.THUMBZZZ.jpg</td>\n",
       "      <td>08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1552041778</td>\n",
       "      <td>Jane Doe</td>\n",
       "      <td>R. J. Kaiser</td>\n",
       "      <td>1999.0</td>\n",
       "      <td>Mira Books</td>\n",
       "      <td>http://images.amazon.com/images/P/1552041778.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Jane Doe</td>\n",
       "      <td>images/1552041778.01.THUMBZZZ.jpg</td>\n",
       "      <td>15</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         isbn                                         book_title  \\\n",
       "0  0002005018                                       Clara Callan   \n",
       "1  0060973129                               Decision in Normandy   \n",
       "2  0374157065  Flu: The Story of the Great Influenza Pandemic...   \n",
       "3  0399135782                             The Kitchen God's Wife   \n",
       "4  0425176428  What If?: The World's Foremost Military Histor...   \n",
       "5  0671870432                                    PLEADING GUILTY   \n",
       "6  074322678X            Where You'll Find Me: And Other Stories   \n",
       "7  0771074670                        Nights Below Station Street   \n",
       "8  0887841740                                 The Middle Stories   \n",
       "9  1552041778                                           Jane Doe   \n",
       "\n",
       "            book_author  year_of_publication                 publisher  \\\n",
       "0  Richard Bruce Wright               2001.0     HarperFlamingo Canada   \n",
       "1          Carlo D'Este               1991.0           HarperPerennial   \n",
       "2      Gina Bari Kolata               1999.0      Farrar Straus Giroux   \n",
       "3               Amy Tan               1991.0          Putnam Pub Group   \n",
       "4         Robert Cowley               2000.0  Berkley Publishing Group   \n",
       "5           Scott Turow               1993.0                Audioworks   \n",
       "6           Ann Beattie               2002.0                  Scribner   \n",
       "7  David Adams Richards               1988.0           Emblem Editions   \n",
       "8           Sheila Heti               2004.0     House of Anansi Press   \n",
       "9          R. J. Kaiser               1999.0                Mira Books   \n",
       "\n",
       "                                             img_url language       category  \\\n",
       "0  http://images.amazon.com/images/P/0002005018.0...       en  ['Actresses']   \n",
       "1  http://images.amazon.com/images/P/0060973129.0...       en  ['1940-1949']   \n",
       "2  http://images.amazon.com/images/P/0374157065.0...       en    ['Medical']   \n",
       "3  http://images.amazon.com/images/P/0399135782.0...       en    ['Fiction']   \n",
       "4  http://images.amazon.com/images/P/0425176428.0...       en    ['History']   \n",
       "5  http://images.amazon.com/images/P/0671870432.0...      NaN            NaN   \n",
       "6  http://images.amazon.com/images/P/074322678X.0...       en    ['Fiction']   \n",
       "7  http://images.amazon.com/images/P/0771074670.0...       en    ['Fiction']   \n",
       "8  http://images.amazon.com/images/P/0887841740.0...      NaN            NaN   \n",
       "9  http://images.amazon.com/images/P/1552041778.0...      NaN            NaN   \n",
       "\n",
       "                                             summary  \\\n",
       "0  In a small town in Canada, Clara Callan reluct...   \n",
       "1  Here, for the first time in paperback, is an o...   \n",
       "2  Describes the great flu epidemic of 1918, an o...   \n",
       "3  A Chinese immigrant who is convinced she is dy...   \n",
       "4  Essays by respected military historians, inclu...   \n",
       "5                                    PLEADING GUILTY   \n",
       "6  Now back in print, Ann Beattie&#39;s finest sh...   \n",
       "7  Another story based in the fictional rural tow...   \n",
       "8                                 The Middle Stories   \n",
       "9                                           Jane Doe   \n",
       "\n",
       "                            img_path code  \n",
       "0  images/0002005018.01.THUMBZZZ.jpg   00  \n",
       "1  images/0060973129.01.THUMBZZZ.jpg   00  \n",
       "2  images/0374157065.01.THUMBZZZ.jpg   03  \n",
       "3  images/0399135782.01.THUMBZZZ.jpg   03  \n",
       "4  images/0425176428.01.THUMBZZZ.jpg   04  \n",
       "5  images/0671870432.01.THUMBZZZ.jpg   06  \n",
       "6  images/074322678X.01.THUMBZZZ.jpg   07  \n",
       "7  images/0771074670.01.THUMBZZZ.jpg   07  \n",
       "8  images/0887841740.01.THUMBZZZ.jpg   08  \n",
       "9  images/1552041778.01.THUMBZZZ.jpg   15  "
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.summary.fillna(df_book['book_title'], inplace=True)\n",
    "df_book.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "a526d26d-6587-48f9-b762-f9e6bcb4b7f2",
   "metadata": {},
   "source": [
    "### year_of_publication"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "1df9b5f6-0c2e-4c63-9580-611b77322f8f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "95"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.year_of_publication.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "726bbe08-e74e-4b8f-a57a-2e0d9531d37a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2001., 1991., 1999., 2000., 1993., 2002., 1988., 2004., 1998.,\n",
       "       1994., 2003., 1997., 1987., 1989., 1996., 1992., 1979., 1995.,\n",
       "       1982., 1985., 1986., 1978., 1980., 1983., 1990., 1981., 1984.,\n",
       "       1968., 1961., 1959., 1946., 1974., 1958., 1976., 1975., 1965.,\n",
       "       1977., 1941., 1970., 1972., 1953., 1971., 1962., 1973., 1960.,\n",
       "       1954., 1966., 1920., 1967., 1956., 1942., 1955., 1969., 1948.,\n",
       "       1963., 1964., 1950., 2005., 1957., 1952., 1937., 1940., 1951.,\n",
       "       1930., 1923., 1943., 1945., 1947., 1936., 1925., 1927., 1939.,\n",
       "       1926., 1938., 1911., 1904., 1949., 1932., 1929., 1902., 1928.,\n",
       "       2006., 1900., 1931., 1378., 1908., 1901., 1924., 1935., 1376.,\n",
       "       1906., 1806., 1933., 1944., 1934.])"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.year_of_publication.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "0f854fd0-db49-4a0c-a680-c5678b114af6",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2001.0 7.078394918274072 25818\n",
      "1991.0 7.036422008192184 9033\n",
      "1999.0 6.987228552999355 23255\n",
      "2000.0 6.986721955092858 22669\n",
      "1993.0 6.986469980268721 10643\n",
      "2002.0 7.126950611989047 30311\n",
      "1988.0 7.0742691120392225 5507\n",
      "2004.0 7.338783599653165 8073\n",
      "1998.0 7.018800040539171 19734\n",
      "1994.0 7.022584973166368 17888\n",
      "2003.0 7.259710194632599 23326\n",
      "1997.0 7.007267525035766 17475\n",
      "1987.0 7.046294416243655 4925\n",
      "1989.0 7.053343350864012 6655\n",
      "1996.0 6.995380657233072 17102\n",
      "1992.0 7.017222278175042 9929\n",
      "1979.0 7.050832602979842 1141\n",
      "1995.0 6.94543904518329 15249\n",
      "1982.0 7.131944444444445 2592\n",
      "1985.0 6.9766514806378135 3512\n",
      "1986.0 7.126570915619389 4456\n",
      "1978.0 7.187832699619772 1315\n",
      "1980.0 7.0741525423728815 1416\n",
      "1983.0 7.150632911392405 3160\n",
      "1990.0 7.086379928315412 8370\n",
      "1981.0 7.092252803261977 1962\n",
      "1984.0 7.160164835164835 3640\n",
      "1968.0 7.83625730994152 171\n",
      "1961.0 7.763636363636364 110\n",
      "1959.0 7.508571428571429 175\n",
      "1946.0 7.55 20\n",
      "1974.0 7.473851030110935 631\n",
      "1958.0 6.928571428571429 70\n",
      "1976.0 7.289588801399825 1143\n",
      "1975.0 7.149405772495755 589\n",
      "1965.0 7.178378378378379 185\n",
      "1977.0 7.1930646672914715 1067\n",
      "1941.0 6.75 4\n",
      "1970.0 7.458445040214477 373\n",
      "1972.0 7.235294117647059 493\n",
      "1953.0 7.61734693877551 196\n",
      "1971.0 7.524216524216524 351\n",
      "1962.0 7.568421052631579 95\n",
      "1973.0 7.2364016736401675 478\n",
      "1960.0 7.838709677419355 124\n",
      "1954.0 7.942857142857143 70\n",
      "1966.0 7.204081632653061 147\n",
      "1920.0 7.466666666666667 30\n",
      "1967.0 7.2254901960784315 102\n",
      "1956.0 7.170212765957447 47\n",
      "1942.0 7.923076923076923 13\n",
      "1955.0 7.3538461538461535 65\n",
      "1969.0 6.94921875 256\n",
      "1948.0 9.1 10\n",
      "1963.0 7.936936936936937 111\n",
      "1964.0 7.475 120\n",
      "1950.0 8.055555555555555 18\n",
      "2005.0 7.785714285714286 42\n",
      "1957.0 8.538461538461538 91\n",
      "1952.0 8.18918918918919 37\n",
      "1937.0 5.5 4\n",
      "1940.0 7.111111111111111 18\n",
      "1951.0 7.6 30\n",
      "1930.0 7.1923076923076925 26\n",
      "1923.0 7.6923076923076925 13\n",
      "1943.0 7.833333333333333 6\n",
      "1945.0 9.11111111111111 9\n",
      "1947.0 7.1 10\n",
      "1936.0 8.428571428571429 7\n",
      "1925.0 5.333333333333333 3\n",
      "1927.0 8.5 6\n",
      "1939.0 5.8 5\n",
      "1926.0 8.5 2\n",
      "1938.0 8.9 10\n",
      "1911.0 6.0 5\n",
      "1904.0 10.0 1\n",
      "1949.0 7.0 12\n",
      "1932.0 6.8 5\n",
      "1929.0 7.6 10\n",
      "1902.0 6.0 2\n",
      "1928.0 6.0 2\n",
      "1900.0 6.0 1\n",
      "1931.0 5.0 2\n",
      "1378.0 10.0 1\n",
      "1908.0 10.0 3\n",
      "1901.0 7.25 4\n",
      "1924.0 8.0 1\n",
      "1935.0 1.0 2\n",
      "1376.0 1.0 1\n",
      "1906.0 3.0 1\n",
      "1933.0 2.0 1\n",
      "1944.0 6.5 2\n"
     ]
    }
   ],
   "source": [
    "years = df_book.year_of_publication.unique()\n",
    "for y in years :\n",
    "    isbn = df_book[df_book.year_of_publication == y].isbn.values\n",
    "    c = df_merge.groupby('year_of_publication')['rating']\n",
    "    try :\n",
    "        print(y, c.mean()[y], c.count()[y])\n",
    "    except :\n",
    "        pass"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "6fc521ae-33be-4052-a75e-8c1bc32a5c89",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([2000., 1990., 1995., 1985., 1975., 1980., 1965., 1960., 1955.,\n",
       "       1945., 1970., 1940., 1950., 1920., 2005., 1935., 1930., 1925.,\n",
       "       1910., 1900., 1375., 1905., 1805.])"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book['year'] = df_book['year_of_publication'].apply(lambda x : x//100*100 + x%100//5*5)\n",
    "df_book.year.unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "9b3b57ab-509f-4f64-873e-8c5dfd519247",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "2000.0 7.130348376090093 110197\n",
      "1990.0 7.026547088412724 55863\n",
      "1995.0 6.992350374400689 92815\n",
      "1985.0 7.058830572739972 25055\n",
      "1975.0 7.17697431018078 5255\n",
      "1980.0 7.132106499608457 12770\n",
      "1965.0 7.2508710801393725 861\n",
      "1960.0 7.7196428571428575 560\n",
      "1955.0 7.569196428571429 448\n",
      "1945.0 7.852459016393443 61\n",
      "1970.0 7.379621668099742 2326\n",
      "1940.0 7.395348837209302 43\n",
      "1950.0 7.763532763532764 351\n",
      "1920.0 7.545454545454546 44\n",
      "2005.0 7.785714285714286 42\n",
      "1935.0 7.178571428571429 28\n",
      "1930.0 6.852941176470588 34\n",
      "1925.0 7.478260869565218 23\n",
      "1910.0 6.0 5\n",
      "1900.0 7.125 8\n",
      "1375.0 5.5 2\n",
      "1905.0 8.25 4\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "1375.0        2\n",
       "1805.0        1\n",
       "1900.0        8\n",
       "1905.0        2\n",
       "1910.0        8\n",
       "1920.0       30\n",
       "1925.0       11\n",
       "1930.0       16\n",
       "1935.0       25\n",
       "1940.0       33\n",
       "1945.0       35\n",
       "1950.0      134\n",
       "1955.0      228\n",
       "1960.0      356\n",
       "1965.0      577\n",
       "1970.0     1686\n",
       "1975.0     3950\n",
       "1980.0     8560\n",
       "1985.0    15249\n",
       "1990.0    28792\n",
       "1995.0    43566\n",
       "2000.0    46281\n",
       "2005.0       20\n",
       "Name: year, dtype: int64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_year = pd.merge(df_train, df_user, on='user_id')\n",
    "df_year = pd.merge(df_year, df_book, on='isbn')\n",
    "years = df_book.year.unique()\n",
    "for y in years :\n",
    "    isbn = df_book[df_book.year == y].isbn.values\n",
    "    c = df_year.groupby('year')['rating']\n",
    "    try :\n",
    "        print(y, c.mean()[y], c.count()[y])\n",
    "    except :\n",
    "        pass\n",
    "df_book.year.value_counts().sort_index()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2787abbc-e2e7-41a7-a39d-f6ebc4500118",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_book.year = df_book.year.apply(lambda x : x if x >= 1910 else 1900)\n",
    "df_book.year_of_publication = df_book.year"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c892a61d-b06f-4ab5-bc61-5274ba774847",
   "metadata": {},
   "source": [
    "### publisher"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "750d6b6e-d670-454b-be4a-add78040b27c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "11571"
      ]
     },
     "execution_count": 42,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.publisher.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "4a560d6d-837f-4197-b16c-71823a0e61f9",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Harlequin 6.385205343889163\n",
      "Ballantine Books 7.057397086144519\n",
      "Pocket 6.982529118136439\n",
      "Penguin Books 7.276193870277976\n",
      "Bantam Books 6.956245710363761\n",
      "Berkley Publishing Group 6.871522644805806\n",
      "Silhouette 6.527592954990215\n",
      "Warner Books 6.970273649117933\n",
      "Scholastic 7.239041496201052\n",
      "Simon & Schuster 6.945327399872855\n",
      "Signet Book 7.040868924889543\n",
      "Penguin USA 6.866480446927374\n",
      "Harpercollins 6.7966011683483805\n",
      "Bantam 7.298848628513376\n",
      "Avon 7.091523895401262\n",
      "Fawcett Books 6.9228130360205835\n",
      "Random House Inc 6.737837837837838\n",
      "Vintage Books USA 7.091599057838263\n",
      "Tor Books 7.205599300087489\n",
      "St. Martin's Press 7.01268575570859\n",
      "Perennial 7.3162244454110485\n",
      "HarperCollins Publishers 7.071972318339101\n",
      "Jove Books 6.836703352956232\n",
      "St Martins Pr 6.516\n",
      "Oxford University Press 7.303771661569827\n",
      "Ace Books 7.086956521739131\n",
      "Dell Publishing Company 6.9186773905272565\n",
      "Goldmann 6.24762726488352\n",
      "Bantam Dell Pub Group 6.852216748768473\n",
      "Del Rey Books 7.185992578849722\n",
      "Zebra Books 6.332642487046632\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "11571"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "publishers = df_book.publisher.value_counts()\n",
    "count = 0\n",
    "data = df_year.groupby('publisher')['rating'].mean()\n",
    "for index, p in enumerate(publishers) :\n",
    "    publisher = publishers.index[index]\n",
    "    count += 1\n",
    "    if index <= 30 :\n",
    "        print(publisher, data[publisher])\n",
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "a94dc4ae-90db-4272-8d7e-6d6ac0e1a735",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2730, 294812, 11983)"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "publishers = df_year.publisher.value_counts()\n",
    "count = 0\n",
    "coverage = 5\n",
    "data = []\n",
    "for key, value in publishers.to_dict().items() :\n",
    "    if value >= coverage :\n",
    "        count += 1\n",
    "        data.append(key)\n",
    "count, sum(publishers[:count]), sum(publishers[count:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "33d3564c-2c81-43e2-a0e7-f053716783ba",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "others                             13421\n",
       "Harlequin                           3005\n",
       "Ballantine Books                    2322\n",
       "Pocket                              2274\n",
       "Penguin Books                       1943\n",
       "                                   ...  \n",
       "Macmillan Pub. Co                      1\n",
       "Anatolian Treasures                    1\n",
       "Dreamworks Entertainment               1\n",
       "Ediciones B Mexico S.A. de C.V.        1\n",
       "Descant                                1\n",
       "Name: publisher, Length: 2731, dtype: int64"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.publisher = df_book.publisher.apply(lambda x : x if x in data else 'others')\n",
    "df_book.publisher.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "628f11f9-f60c-462d-abe6-4b00e8f4e1ce",
   "metadata": {},
   "source": [
    "### language"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "fadd7d5e-2f32-4bb4-9378-b14480247083",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "      <th>code</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0671870432</td>\n",
       "      <td>PLEADING GUILTY</td>\n",
       "      <td>Scott Turow</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>Audioworks</td>\n",
       "      <td>http://images.amazon.com/images/P/0671870432.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>PLEADING GUILTY</td>\n",
       "      <td>images/0671870432.01.THUMBZZZ.jpg</td>\n",
       "      <td>06</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0887841740</td>\n",
       "      <td>The Middle Stories</td>\n",
       "      <td>Sheila Heti</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>House of Anansi Press</td>\n",
       "      <td>http://images.amazon.com/images/P/0887841740.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Middle Stories</td>\n",
       "      <td>images/0887841740.01.THUMBZZZ.jpg</td>\n",
       "      <td>08</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1552041778</td>\n",
       "      <td>Jane Doe</td>\n",
       "      <td>R. J. Kaiser</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>Mira Books</td>\n",
       "      <td>http://images.amazon.com/images/P/1552041778.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Jane Doe</td>\n",
       "      <td>images/1552041778.01.THUMBZZZ.jpg</td>\n",
       "      <td>15</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1558746218</td>\n",
       "      <td>A Second Chicken Soup for the Woman's Soul (Ch...</td>\n",
       "      <td>Jack Canfield</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>Health Communications</td>\n",
       "      <td>http://images.amazon.com/images/P/1558746218.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>A Second Chicken Soup for the Woman's Soul (Ch...</td>\n",
       "      <td>images/1558746218.01.THUMBZZZ.jpg</td>\n",
       "      <td>15</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1567407781</td>\n",
       "      <td>The Witchfinder (Amos Walker Mystery Series)</td>\n",
       "      <td>Loren D. Estleman</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>Brilliance Audio - Trade</td>\n",
       "      <td>http://images.amazon.com/images/P/1567407781.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Witchfinder (Amos Walker Mystery Series)</td>\n",
       "      <td>images/1567407781.01.THUMBZZZ.jpg</td>\n",
       "      <td>15</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149560</th>\n",
       "      <td>0345330293</td>\n",
       "      <td>Town Like Alice</td>\n",
       "      <td>Nevil Shute</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>Ballantine Books</td>\n",
       "      <td>http://images.amazon.com/images/P/0345330293.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Town Like Alice</td>\n",
       "      <td>images/0345330293.01.THUMBZZZ.jpg</td>\n",
       "      <td>03</td>\n",
       "      <td>1980.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149561</th>\n",
       "      <td>8408044079</td>\n",
       "      <td>LA Muerte Del Decano</td>\n",
       "      <td>Gonzalo Torrrente Ballester</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8408044079.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>LA Muerte Del Decano</td>\n",
       "      <td>images/8408044079.01.THUMBZZZ.jpg</td>\n",
       "      <td>84</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149564</th>\n",
       "      <td>0743525493</td>\n",
       "      <td>The Motley Fool's What To Do with Your Money N...</td>\n",
       "      <td>David Gardner</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Simon &amp; Schuster Audio</td>\n",
       "      <td>http://images.amazon.com/images/P/0743525493.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Motley Fool's What To Do with Your Money N...</td>\n",
       "      <td>images/0743525493.01.THUMBZZZ.jpg</td>\n",
       "      <td>07</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149567</th>\n",
       "      <td>0884159221</td>\n",
       "      <td>Why stop?: A guide to Texas historical roadsid...</td>\n",
       "      <td>Claude Dooley</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/0884159221.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Why stop?: A guide to Texas historical roadsid...</td>\n",
       "      <td>images/0884159221.01.THUMBZZZ.jpg</td>\n",
       "      <td>08</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>149569</th>\n",
       "      <td>1569661057</td>\n",
       "      <td>Dallas Street Map Guide and Directory, 2000 Ed...</td>\n",
       "      <td>Mapsco</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/1569661057.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Dallas Street Map Guide and Directory, 2000 Ed...</td>\n",
       "      <td>images/1569661057.01.THUMBZZZ.jpg</td>\n",
       "      <td>15</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>67227 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              isbn                                         book_title  \\\n",
       "5       0671870432                                    PLEADING GUILTY   \n",
       "8       0887841740                                 The Middle Stories   \n",
       "9       1552041778                                           Jane Doe   \n",
       "10      1558746218  A Second Chicken Soup for the Woman's Soul (Ch...   \n",
       "11      1567407781       The Witchfinder (Amos Walker Mystery Series)   \n",
       "...            ...                                                ...   \n",
       "149560  0345330293                                    Town Like Alice   \n",
       "149561  8408044079                               LA Muerte Del Decano   \n",
       "149564  0743525493  The Motley Fool's What To Do with Your Money N...   \n",
       "149567  0884159221  Why stop?: A guide to Texas historical roadsid...   \n",
       "149569  1569661057  Dallas Street Map Guide and Directory, 2000 Ed...   \n",
       "\n",
       "                        book_author  year_of_publication  \\\n",
       "5                       Scott Turow               1990.0   \n",
       "8                       Sheila Heti               2000.0   \n",
       "9                      R. J. Kaiser               1995.0   \n",
       "10                    Jack Canfield               1995.0   \n",
       "11                Loren D. Estleman               1995.0   \n",
       "...                             ...                  ...   \n",
       "149560                  Nevil Shute               1980.0   \n",
       "149561  Gonzalo Torrrente Ballester               2000.0   \n",
       "149564                David Gardner               2000.0   \n",
       "149567                Claude Dooley               1985.0   \n",
       "149569                       Mapsco               1995.0   \n",
       "\n",
       "                       publisher  \\\n",
       "5                     Audioworks   \n",
       "8          House of Anansi Press   \n",
       "9                     Mira Books   \n",
       "10         Health Communications   \n",
       "11      Brilliance Audio - Trade   \n",
       "...                          ...   \n",
       "149560          Ballantine Books   \n",
       "149561                    others   \n",
       "149564    Simon & Schuster Audio   \n",
       "149567                    others   \n",
       "149569                    others   \n",
       "\n",
       "                                                  img_url language category  \\\n",
       "5       http://images.amazon.com/images/P/0671870432.0...      NaN      NaN   \n",
       "8       http://images.amazon.com/images/P/0887841740.0...      NaN      NaN   \n",
       "9       http://images.amazon.com/images/P/1552041778.0...      NaN      NaN   \n",
       "10      http://images.amazon.com/images/P/1558746218.0...      NaN      NaN   \n",
       "11      http://images.amazon.com/images/P/1567407781.0...      NaN      NaN   \n",
       "...                                                   ...      ...      ...   \n",
       "149560  http://images.amazon.com/images/P/0345330293.0...      NaN      NaN   \n",
       "149561  http://images.amazon.com/images/P/8408044079.0...      NaN      NaN   \n",
       "149564  http://images.amazon.com/images/P/0743525493.0...      NaN      NaN   \n",
       "149567  http://images.amazon.com/images/P/0884159221.0...      NaN      NaN   \n",
       "149569  http://images.amazon.com/images/P/1569661057.0...      NaN      NaN   \n",
       "\n",
       "                                                  summary  \\\n",
       "5                                         PLEADING GUILTY   \n",
       "8                                      The Middle Stories   \n",
       "9                                                Jane Doe   \n",
       "10      A Second Chicken Soup for the Woman's Soul (Ch...   \n",
       "11           The Witchfinder (Amos Walker Mystery Series)   \n",
       "...                                                   ...   \n",
       "149560                                    Town Like Alice   \n",
       "149561                               LA Muerte Del Decano   \n",
       "149564  The Motley Fool's What To Do with Your Money N...   \n",
       "149567  Why stop?: A guide to Texas historical roadsid...   \n",
       "149569  Dallas Street Map Guide and Directory, 2000 Ed...   \n",
       "\n",
       "                                 img_path code    year  \n",
       "5       images/0671870432.01.THUMBZZZ.jpg   06  1990.0  \n",
       "8       images/0887841740.01.THUMBZZZ.jpg   08  2000.0  \n",
       "9       images/1552041778.01.THUMBZZZ.jpg   15  1995.0  \n",
       "10      images/1558746218.01.THUMBZZZ.jpg   15  1995.0  \n",
       "11      images/1567407781.01.THUMBZZZ.jpg   15  1995.0  \n",
       "...                                   ...  ...     ...  \n",
       "149560  images/0345330293.01.THUMBZZZ.jpg   03  1980.0  \n",
       "149561  images/8408044079.01.THUMBZZZ.jpg   84  2000.0  \n",
       "149564  images/0743525493.01.THUMBZZZ.jpg   07  2000.0  \n",
       "149567  images/0884159221.01.THUMBZZZ.jpg   08  1985.0  \n",
       "149569  images/1569661057.01.THUMBZZZ.jpg   15  1995.0  \n",
       "\n",
       "[67227 rows x 12 columns]"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book[df_book.language.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "70264a65-5f0a-4381-ad89-fd3a153750cc",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "      <th>code</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2886</th>\n",
       "      <td>B0000DAPP1</td>\n",
       "      <td>Discover Your Genius: How to Think Like Histor...</td>\n",
       "      <td>Michael J. Gelb</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>HarperCollins</td>\n",
       "      <td>http://images.amazon.com/images/P/B0000DAPP1.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Discover Your Genius: How to Think Like Histor...</td>\n",
       "      <td>images/B0000DAPP1.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11095</th>\n",
       "      <td>5553531144</td>\n",
       "      <td>Human Dignity and Freedom-25.95</td>\n",
       "      <td>Universe Publishing Co</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>First Glance Books</td>\n",
       "      <td>http://images.amazon.com/images/P/5553531144.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Human Dignity and Freedom-25.95</td>\n",
       "      <td>images/5553531144.01.THUMBZZZ.jpg</td>\n",
       "      <td>55</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12015</th>\n",
       "      <td>8631301663</td>\n",
       "      <td>Martin protiv CIA-e i KGB-a (Hit junior)</td>\n",
       "      <td>Dubravko Jelacic Buzimski</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8631301663.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Martin protiv CIA-e i KGB-a (Hit junior)</td>\n",
       "      <td>images/8631301663.01.THUMBZZZ.jpg</td>\n",
       "      <td>86</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12676</th>\n",
       "      <td>8308033555</td>\n",
       "      <td>Ono</td>\n",
       "      <td>Dorota Terakowska</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8308033555.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ono</td>\n",
       "      <td>images/8308033555.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15104</th>\n",
       "      <td>B0000A2U93</td>\n",
       "      <td>Carmilla</td>\n",
       "      <td>Joseph Sheridan Le Fanu</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/B0000A2U93.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Carmilla</td>\n",
       "      <td>images/B0000A2U93.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146157</th>\n",
       "      <td>5550534274</td>\n",
       "      <td>Peter Pan Read-Along Book and Cassette</td>\n",
       "      <td>Walt Disney Productions</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>Walt Disney Records &amp; Audio</td>\n",
       "      <td>http://images.amazon.com/images/P/5550534274.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Peter Pan Read-Along Book and Cassette</td>\n",
       "      <td>images/5550534274.01.THUMBZZZ.jpg</td>\n",
       "      <td>55</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146197</th>\n",
       "      <td>B0000DAOHN</td>\n",
       "      <td>Hard Eight</td>\n",
       "      <td>Janet Evanovich</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>St. Martin's Press</td>\n",
       "      <td>http://images.amazon.com/images/P/B0000DAOHN.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Hard Eight</td>\n",
       "      <td>images/B0000DAOHN.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146234</th>\n",
       "      <td>8681283405</td>\n",
       "      <td>Poslednja pisma iz TuÂ³ine</td>\n",
       "      <td>Borislav Pekic</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8681283405.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Poslednja pisma iz TuÂ³ine</td>\n",
       "      <td>images/8681283405.01.THUMBZZZ.jpg</td>\n",
       "      <td>86</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146522</th>\n",
       "      <td>5551172945</td>\n",
       "      <td>The Picture of Dorian Gray</td>\n",
       "      <td>Oscar Wilde</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Modern Library</td>\n",
       "      <td>http://images.amazon.com/images/P/5551172945.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Picture of Dorian Gray</td>\n",
       "      <td>images/5551172945.01.THUMBZZZ.jpg</td>\n",
       "      <td>55</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148602</th>\n",
       "      <td>542001226X</td>\n",
       "      <td>We, the Balts</td>\n",
       "      <td>Algirdas Sabaliauskas</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/542001226X.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>We, the Balts</td>\n",
       "      <td>images/542001226X.01.THUMBZZZ.jpg</td>\n",
       "      <td>54</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>105 rows × 12 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "              isbn                                         book_title  \\\n",
       "2886    B0000DAPP1  Discover Your Genius: How to Think Like Histor...   \n",
       "11095   5553531144                    Human Dignity and Freedom-25.95   \n",
       "12015   8631301663           Martin protiv CIA-e i KGB-a (Hit junior)   \n",
       "12676   8308033555                                                Ono   \n",
       "15104   B0000A2U93                                           Carmilla   \n",
       "...            ...                                                ...   \n",
       "146157  5550534274             Peter Pan Read-Along Book and Cassette   \n",
       "146197  B0000DAOHN                                         Hard Eight   \n",
       "146234  8681283405                         Poslednja pisma iz TuÂ³ine   \n",
       "146522  5551172945                         The Picture of Dorian Gray   \n",
       "148602  542001226X                                      We, the Balts   \n",
       "\n",
       "                      book_author  year_of_publication  \\\n",
       "2886              Michael J. Gelb               2000.0   \n",
       "11095      Universe Publishing Co               1990.0   \n",
       "12015   Dubravko Jelacic Buzimski               1985.0   \n",
       "12676           Dorota Terakowska               2000.0   \n",
       "15104     Joseph Sheridan Le Fanu               1990.0   \n",
       "...                           ...                  ...   \n",
       "146157    Walt Disney Productions               1985.0   \n",
       "146197            Janet Evanovich               2000.0   \n",
       "146234             Borislav Pekic               1990.0   \n",
       "146522                Oscar Wilde               2000.0   \n",
       "148602      Algirdas Sabaliauskas               1990.0   \n",
       "\n",
       "                          publisher  \\\n",
       "2886                  HarperCollins   \n",
       "11095            First Glance Books   \n",
       "12015                        others   \n",
       "12676                        others   \n",
       "15104                        others   \n",
       "...                             ...   \n",
       "146157  Walt Disney Records & Audio   \n",
       "146197           St. Martin's Press   \n",
       "146234                       others   \n",
       "146522               Modern Library   \n",
       "148602                       others   \n",
       "\n",
       "                                                  img_url language category  \\\n",
       "2886    http://images.amazon.com/images/P/B0000DAPP1.0...      NaN      NaN   \n",
       "11095   http://images.amazon.com/images/P/5553531144.0...      NaN      NaN   \n",
       "12015   http://images.amazon.com/images/P/8631301663.0...      NaN      NaN   \n",
       "12676   http://images.amazon.com/images/P/8308033555.0...      NaN      NaN   \n",
       "15104   http://images.amazon.com/images/P/B0000A2U93.0...      NaN      NaN   \n",
       "...                                                   ...      ...      ...   \n",
       "146157  http://images.amazon.com/images/P/5550534274.0...      NaN      NaN   \n",
       "146197  http://images.amazon.com/images/P/B0000DAOHN.0...      NaN      NaN   \n",
       "146234  http://images.amazon.com/images/P/8681283405.0...      NaN      NaN   \n",
       "146522  http://images.amazon.com/images/P/5551172945.0...      NaN      NaN   \n",
       "148602  http://images.amazon.com/images/P/542001226X.0...      NaN      NaN   \n",
       "\n",
       "                                                  summary  \\\n",
       "2886    Discover Your Genius: How to Think Like Histor...   \n",
       "11095                     Human Dignity and Freedom-25.95   \n",
       "12015            Martin protiv CIA-e i KGB-a (Hit junior)   \n",
       "12676                                                 Ono   \n",
       "15104                                            Carmilla   \n",
       "...                                                   ...   \n",
       "146157             Peter Pan Read-Along Book and Cassette   \n",
       "146197                                         Hard Eight   \n",
       "146234                         Poslednja pisma iz TuÂ³ine   \n",
       "146522                         The Picture of Dorian Gray   \n",
       "148602                                      We, the Balts   \n",
       "\n",
       "                                 img_path code    year  \n",
       "2886    images/B0000DAPP1.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "11095   images/5553531144.01.THUMBZZZ.jpg   55  1990.0  \n",
       "12015   images/8631301663.01.THUMBZZZ.jpg   86  1985.0  \n",
       "12676   images/8308033555.01.THUMBZZZ.jpg   83  2000.0  \n",
       "15104   images/B0000A2U93.01.THUMBZZZ.jpg   B0  1990.0  \n",
       "...                                   ...  ...     ...  \n",
       "146157  images/5550534274.01.THUMBZZZ.jpg   55  1985.0  \n",
       "146197  images/B0000DAOHN.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "146234  images/8681283405.01.THUMBZZZ.jpg   86  1990.0  \n",
       "146522  images/5551172945.01.THUMBZZZ.jpg   55  2000.0  \n",
       "148602  images/542001226X.01.THUMBZZZ.jpg   54  1990.0  \n",
       "\n",
       "[105 rows x 12 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_lang = df_book[df_book.language.isna()]\n",
    "code = null_lang.code.unique()\n",
    "for c in code :\n",
    "    temp = df_book[df_book.code == c]\n",
    "    count = temp['language'].value_counts()\n",
    "    index = temp.index.intersection(null_lang.index)\n",
    "    if len(count.index) >= 1 :\n",
    "        for i in index :\n",
    "            df_book.loc[i, 'language'] = count.index[0]\n",
    "df_book[df_book.language.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "1ce33ef2-e2c5-4088-a65c-d6cd662d5776",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "      <th>code</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2886</th>\n",
       "      <td>B0000DAPP1</td>\n",
       "      <td>Discover Your Genius: How to Think Like Histor...</td>\n",
       "      <td>Michael J. Gelb</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>HarperCollins</td>\n",
       "      <td>http://images.amazon.com/images/P/B0000DAPP1.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Discover Your Genius: How to Think Like Histor...</td>\n",
       "      <td>images/B0000DAPP1.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11095</th>\n",
       "      <td>5553531144</td>\n",
       "      <td>Human Dignity and Freedom-25.95</td>\n",
       "      <td>Universe Publishing Co</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>First Glance Books</td>\n",
       "      <td>http://images.amazon.com/images/P/5553531144.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Human Dignity and Freedom-25.95</td>\n",
       "      <td>images/5553531144.01.THUMBZZZ.jpg</td>\n",
       "      <td>55</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12015</th>\n",
       "      <td>8631301663</td>\n",
       "      <td>Martin protiv CIA-e i KGB-a (Hit junior)</td>\n",
       "      <td>Dubravko Jelacic Buzimski</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8631301663.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Martin protiv CIA-e i KGB-a (Hit junior)</td>\n",
       "      <td>images/8631301663.01.THUMBZZZ.jpg</td>\n",
       "      <td>86</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12676</th>\n",
       "      <td>8308033555</td>\n",
       "      <td>Ono</td>\n",
       "      <td>Dorota Terakowska</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8308033555.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ono</td>\n",
       "      <td>images/8308033555.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16173</th>\n",
       "      <td>B0000633PU</td>\n",
       "      <td>The Story of Aladdin and the Wonderful Lamp</td>\n",
       "      <td>S. Lane Poole</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/B0000633PU.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Story of Aladdin and the Wonderful Lamp</td>\n",
       "      <td>images/B0000633PU.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37419</th>\n",
       "      <td>5415008233</td>\n",
       "      <td>Vilniaus pokeris: Romanas</td>\n",
       "      <td>Ricardas Gavelis</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/5415008233.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Vilniaus pokeris: Romanas</td>\n",
       "      <td>images/5415008233.01.THUMBZZZ.jpg</td>\n",
       "      <td>54</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39430</th>\n",
       "      <td>8303025732</td>\n",
       "      <td>StanisÂ±aw Ignacy Witkiewicz</td>\n",
       "      <td>Piotr Piotrowski</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8303025732.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>StanisÂ±aw Ignacy Witkiewicz</td>\n",
       "      <td>images/8303025732.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39432</th>\n",
       "      <td>8320715164</td>\n",
       "      <td>Dzienniki (Pisma wybrane / Stefan Kisielewski)</td>\n",
       "      <td>Stefan Kisielewski</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8320715164.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Dzienniki (Pisma wybrane / Stefan Kisielewski)</td>\n",
       "      <td>images/8320715164.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39434</th>\n",
       "      <td>8321329519</td>\n",
       "      <td>Jan Matejko (W kregu sztuki)</td>\n",
       "      <td>Janusz Maciej MichaÂ±owski</td>\n",
       "      <td>1975.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8321329519.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Jan Matejko (W kregu sztuki)</td>\n",
       "      <td>images/8321329519.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1975.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39435</th>\n",
       "      <td>8321407749</td>\n",
       "      <td>Wzory listÃ³w polskich</td>\n",
       "      <td>Roxana Sinielnikoff</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8321407749.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Wzory listÃ³w polskich</td>\n",
       "      <td>images/8321407749.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39436</th>\n",
       "      <td>832140927X</td>\n",
       "      <td>Kieszonkowy Slownik Angielsk O-Polski Polsko-A...</td>\n",
       "      <td>K. Stanislawsk</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/832140927X.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kieszonkowy Slownik Angielsk O-Polski Polsko-A...</td>\n",
       "      <td>images/832140927X.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39437</th>\n",
       "      <td>8321728677</td>\n",
       "      <td>Warszawski Zamek KrÃ³lewski: Zamek Rzeczypospo...</td>\n",
       "      <td>Maria Szypowska</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8321728677.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Warszawski Zamek KrÃ³lewski: Zamek Rzeczypospo...</td>\n",
       "      <td>images/8321728677.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39438</th>\n",
       "      <td>8322106491</td>\n",
       "      <td>Tatry: GÃ³ry najpiekniejsze = The Tatra : spell</td>\n",
       "      <td>Ryszard Ziemak</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8322106491.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Tatry: GÃ³ry najpiekniejsze = The Tatra : spell</td>\n",
       "      <td>images/8322106491.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39439</th>\n",
       "      <td>8370061982</td>\n",
       "      <td>Fotografie =: Photography, 1980-1989</td>\n",
       "      <td>StanisÂ±aw Markowski</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8370061982.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Fotografie =: Photography, 1980-1989</td>\n",
       "      <td>images/8370061982.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39440</th>\n",
       "      <td>837023030X</td>\n",
       "      <td>Ogniem i mieczem w pustyni i w puszczy</td>\n",
       "      <td>Andrzej Klominek</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/837023030X.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ogniem i mieczem w pustyni i w puszczy</td>\n",
       "      <td>images/837023030X.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39441</th>\n",
       "      <td>8370237797</td>\n",
       "      <td>Polski Londyn (A to Polska wÂ±asnie)</td>\n",
       "      <td>RafaÂ± Habielski</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8370237797.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Polski Londyn (A to Polska wÂ±asnie)</td>\n",
       "      <td>images/8370237797.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39442</th>\n",
       "      <td>8370665098</td>\n",
       "      <td>Kim pan jest, panie Wachowski?</td>\n",
       "      <td>PaweÂ± Rabiej</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8370665098.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Kim pan jest, panie Wachowski?</td>\n",
       "      <td>images/8370665098.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39443</th>\n",
       "      <td>8385412565</td>\n",
       "      <td>Zakopane (DookoÂ±a Polski)</td>\n",
       "      <td>Joanna Markin</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8385412565.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Zakopane (DookoÂ±a Polski)</td>\n",
       "      <td>images/8385412565.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39444</th>\n",
       "      <td>8385496424</td>\n",
       "      <td>Pieniny (Krainy piekna)</td>\n",
       "      <td>DionÃ½z Dugas</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8385496424.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Pieniny (Krainy piekna)</td>\n",
       "      <td>images/8385496424.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>51271</th>\n",
       "      <td>B00005U7YK</td>\n",
       "      <td>The New Gurus -- From Sun-Tzu And Jesus To Mac...</td>\n",
       "      <td>Stuart Crainer</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/B00005U7YK.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The New Gurus -- From Sun-Tzu And Jesus To Mac...</td>\n",
       "      <td>images/B00005U7YK.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>69705</th>\n",
       "      <td>B0000C2W5U</td>\n",
       "      <td>Femme Fatale: Famous Beauties Then and Now</td>\n",
       "      <td>Serge Normant</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Viking Press</td>\n",
       "      <td>http://images.amazon.com/images/P/B0000C2W5U.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Femme Fatale: Famous Beauties Then and Now</td>\n",
       "      <td>images/B0000C2W5U.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>73151</th>\n",
       "      <td>8308019188</td>\n",
       "      <td>Ciemnosc i plesn (Polskie opowiadania wspÃ³Â±c...</td>\n",
       "      <td>StanisÂ±aw Lem</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8308019188.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Ciemnosc i plesn (Polskie opowiadania wspÃ³Â±c...</td>\n",
       "      <td>images/8308019188.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>76670</th>\n",
       "      <td>8673311373</td>\n",
       "      <td>Milenina pisma Kafki (Kolekcija \\Semafor\\\")\"</td>\n",
       "      <td>Ana Somlo</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8673311373.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Milenina pisma Kafki (Kolekcija \\Semafor\\\")\"</td>\n",
       "      <td>images/8673311373.01.THUMBZZZ.jpg</td>\n",
       "      <td>86</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84028</th>\n",
       "      <td>2605000214</td>\n",
       "      <td>Le surrÃ©alisme, 1919-1939 (Collection La Pein...</td>\n",
       "      <td>GaÃ«tan Picon</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/2605000214.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Le surrÃ©alisme, 1919-1939 (Collection La Pein...</td>\n",
       "      <td>images/2605000214.01.THUMBZZZ.jpg</td>\n",
       "      <td>26</td>\n",
       "      <td>1980.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>84560</th>\n",
       "      <td>8670710110</td>\n",
       "      <td>Citanka za licemjere: Tanjusna, didakticka sat...</td>\n",
       "      <td>Joza Svarcak</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8670710110.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Citanka za licemjere: Tanjusna, didakticka sat...</td>\n",
       "      <td>images/8670710110.01.THUMBZZZ.jpg</td>\n",
       "      <td>86</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>85684</th>\n",
       "      <td>8390096420</td>\n",
       "      <td>Historia doktryn politycznych i prawnych</td>\n",
       "      <td>Henryk Olszewski</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8390096420.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Historia doktryn politycznych i prawnych</td>\n",
       "      <td>images/8390096420.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>89805</th>\n",
       "      <td>7561910908</td>\n",
       "      <td>Urban Chinese: Mandarin in 21st Century China</td>\n",
       "      <td>Gerald Scott Klayman</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/7561910908.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Urban Chinese: Mandarin in 21st Century China</td>\n",
       "      <td>images/7561910908.01.THUMBZZZ.jpg</td>\n",
       "      <td>75</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113787</th>\n",
       "      <td>8322319851</td>\n",
       "      <td>Polish Amber</td>\n",
       "      <td>J. Grabowska</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8322319851.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Polish Amber</td>\n",
       "      <td>images/8322319851.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>114951</th>\n",
       "      <td>B0001I1KOG</td>\n",
       "      <td>New York Public Library Literature Companion</td>\n",
       "      <td>New York Public Library</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Free Press</td>\n",
       "      <td>http://images.amazon.com/images/P/B0001I1KOG.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>New York Public Library Literature Companion</td>\n",
       "      <td>images/B0001I1KOG.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120274</th>\n",
       "      <td>B000092Q0A</td>\n",
       "      <td>The Community of the Ark: A Visit to the Utopi...</td>\n",
       "      <td>Mark Shepard</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/B000092Q0A.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Community of the Ark: A Visit to the Utopi...</td>\n",
       "      <td>images/B000092Q0A.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>120275</th>\n",
       "      <td>B00013AX9E</td>\n",
       "      <td>Modern Contemporary: Aspects of Art at MoMA Si...</td>\n",
       "      <td>P Ed Varnedoe/Antonelli Kick</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/B00013AX9E.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Modern Contemporary: Aspects of Art at MoMA Si...</td>\n",
       "      <td>images/B00013AX9E.01.THUMBZZZ.jpg</td>\n",
       "      <td>B0</td>\n",
       "      <td>2000.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>127311</th>\n",
       "      <td>4190869775</td>\n",
       "      <td>Three d Wonderland</td>\n",
       "      <td>Publishing Tokuma</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/4190869775.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Three d Wonderland</td>\n",
       "      <td>images/4190869775.01.THUMBZZZ.jpg</td>\n",
       "      <td>41</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>132065</th>\n",
       "      <td>4403660215</td>\n",
       "      <td>WeiÃ?Â¿: Assasin and White Shaman</td>\n",
       "      <td>Kyoko Tsuchiya</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/4403660215.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>WeiÃ?Â¿: Assasin and White Shaman</td>\n",
       "      <td>images/4403660215.01.THUMBZZZ.jpg</td>\n",
       "      <td>44</td>\n",
       "      <td>1995.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136842</th>\n",
       "      <td>8306013204</td>\n",
       "      <td>NiepodlegÂ±osc i socjalizm: Tradycja w mysli p...</td>\n",
       "      <td>StanisÂ±aw Ciesielski</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8306013204.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NiepodlegÂ±osc i socjalizm: Tradycja w mysli p...</td>\n",
       "      <td>images/8306013204.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>136844</th>\n",
       "      <td>8321803059</td>\n",
       "      <td>Autopsja czyli dziennik kryzysu</td>\n",
       "      <td>Jacek Krakowski</td>\n",
       "      <td>1980.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8321803059.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Autopsja czyli dziennik kryzysu</td>\n",
       "      <td>images/8321803059.01.THUMBZZZ.jpg</td>\n",
       "      <td>83</td>\n",
       "      <td>1980.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>139928</th>\n",
       "      <td>4621027530</td>\n",
       "      <td>Vaccari's Concise English-Japanese Japanese-En...</td>\n",
       "      <td>Oreste, Mr. &amp; Mrs. Vaccari</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>French &amp; European Pubns</td>\n",
       "      <td>http://images.amazon.com/images/P/4621027530.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Vaccari's Concise English-Japanese Japanese-En...</td>\n",
       "      <td>images/4621027530.01.THUMBZZZ.jpg</td>\n",
       "      <td>46</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>141581</th>\n",
       "      <td>5551776328</td>\n",
       "      <td>The Great Dying: A Cosmic Catastrophe Demolish...</td>\n",
       "      <td>Kenneth J. Hsu</td>\n",
       "      <td>1985.0</td>\n",
       "      <td>Harcourt</td>\n",
       "      <td>http://images.amazon.com/images/P/5551776328.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>The Great Dying: A Cosmic Catastrophe Demolish...</td>\n",
       "      <td>images/5551776328.01.THUMBZZZ.jpg</td>\n",
       "      <td>55</td>\n",
       "      <td>1985.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146234</th>\n",
       "      <td>8681283405</td>\n",
       "      <td>Poslednja pisma iz TuÂ³ine</td>\n",
       "      <td>Borislav Pekic</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/8681283405.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Poslednja pisma iz TuÂ³ine</td>\n",
       "      <td>images/8681283405.01.THUMBZZZ.jpg</td>\n",
       "      <td>86</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>148602</th>\n",
       "      <td>542001226X</td>\n",
       "      <td>We, the Balts</td>\n",
       "      <td>Algirdas Sabaliauskas</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>others</td>\n",
       "      <td>http://images.amazon.com/images/P/542001226X.0...</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>We, the Balts</td>\n",
       "      <td>images/542001226X.01.THUMBZZZ.jpg</td>\n",
       "      <td>54</td>\n",
       "      <td>1990.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              isbn                                         book_title  \\\n",
       "2886    B0000DAPP1  Discover Your Genius: How to Think Like Histor...   \n",
       "11095   5553531144                    Human Dignity and Freedom-25.95   \n",
       "12015   8631301663           Martin protiv CIA-e i KGB-a (Hit junior)   \n",
       "12676   8308033555                                                Ono   \n",
       "16173   B0000633PU        The Story of Aladdin and the Wonderful Lamp   \n",
       "37419   5415008233                          Vilniaus pokeris: Romanas   \n",
       "39430   8303025732                       StanisÂ±aw Ignacy Witkiewicz   \n",
       "39432   8320715164     Dzienniki (Pisma wybrane / Stefan Kisielewski)   \n",
       "39434   8321329519                       Jan Matejko (W kregu sztuki)   \n",
       "39435   8321407749                             Wzory listÃ³w polskich   \n",
       "39436   832140927X  Kieszonkowy Slownik Angielsk O-Polski Polsko-A...   \n",
       "39437   8321728677  Warszawski Zamek KrÃ³lewski: Zamek Rzeczypospo...   \n",
       "39438   8322106491    Tatry: GÃ³ry najpiekniejsze = The Tatra : spell   \n",
       "39439   8370061982               Fotografie =: Photography, 1980-1989   \n",
       "39440   837023030X             Ogniem i mieczem w pustyni i w puszczy   \n",
       "39441   8370237797               Polski Londyn (A to Polska wÂ±asnie)   \n",
       "39442   8370665098                     Kim pan jest, panie Wachowski?   \n",
       "39443   8385412565                         Zakopane (DookoÂ±a Polski)   \n",
       "39444   8385496424                            Pieniny (Krainy piekna)   \n",
       "51271   B00005U7YK  The New Gurus -- From Sun-Tzu And Jesus To Mac...   \n",
       "69705   B0000C2W5U         Femme Fatale: Famous Beauties Then and Now   \n",
       "73151   8308019188  Ciemnosc i plesn (Polskie opowiadania wspÃ³Â±c...   \n",
       "76670   8673311373       Milenina pisma Kafki (Kolekcija \\Semafor\\\")\"   \n",
       "84028   2605000214  Le surrÃ©alisme, 1919-1939 (Collection La Pein...   \n",
       "84560   8670710110  Citanka za licemjere: Tanjusna, didakticka sat...   \n",
       "85684   8390096420           Historia doktryn politycznych i prawnych   \n",
       "89805   7561910908      Urban Chinese: Mandarin in 21st Century China   \n",
       "113787  8322319851                                       Polish Amber   \n",
       "114951  B0001I1KOG       New York Public Library Literature Companion   \n",
       "120274  B000092Q0A  The Community of the Ark: A Visit to the Utopi...   \n",
       "120275  B00013AX9E  Modern Contemporary: Aspects of Art at MoMA Si...   \n",
       "127311  4190869775                                 Three d Wonderland   \n",
       "132065  4403660215                  WeiÃ?Â¿: Assasin and White Shaman   \n",
       "136842  8306013204  NiepodlegÂ±osc i socjalizm: Tradycja w mysli p...   \n",
       "136844  8321803059                    Autopsja czyli dziennik kryzysu   \n",
       "139928  4621027530  Vaccari's Concise English-Japanese Japanese-En...   \n",
       "141581  5551776328  The Great Dying: A Cosmic Catastrophe Demolish...   \n",
       "146234  8681283405                         Poslednja pisma iz TuÂ³ine   \n",
       "148602  542001226X                                      We, the Balts   \n",
       "\n",
       "                         book_author  year_of_publication  \\\n",
       "2886                 Michael J. Gelb               2000.0   \n",
       "11095         Universe Publishing Co               1990.0   \n",
       "12015      Dubravko Jelacic Buzimski               1985.0   \n",
       "12676              Dorota Terakowska               2000.0   \n",
       "16173                  S. Lane Poole               1990.0   \n",
       "37419               Ricardas Gavelis               1990.0   \n",
       "39430               Piotr Piotrowski               1985.0   \n",
       "39432             Stefan Kisielewski               1995.0   \n",
       "39434     Janusz Maciej MichaÂ±owski               1975.0   \n",
       "39435            Roxana Sinielnikoff               1990.0   \n",
       "39436                 K. Stanislawsk               1990.0   \n",
       "39437                Maria Szypowska               1985.0   \n",
       "39438                 Ryszard Ziemak               1990.0   \n",
       "39439           StanisÂ±aw Markowski               1990.0   \n",
       "39440               Andrzej Klominek               1990.0   \n",
       "39441               RafaÂ± Habielski               2000.0   \n",
       "39442                  PaweÂ± Rabiej               1990.0   \n",
       "39443                  Joanna Markin               1995.0   \n",
       "39444                  DionÃ½z Dugas               1995.0   \n",
       "51271                 Stuart Crainer               2000.0   \n",
       "69705                  Serge Normant               2000.0   \n",
       "73151                 StanisÂ±aw Lem               1985.0   \n",
       "76670                      Ana Somlo               1985.0   \n",
       "84028                  GaÃ«tan Picon               1980.0   \n",
       "84560                   Joza Svarcak               1985.0   \n",
       "85684               Henryk Olszewski               1990.0   \n",
       "89805           Gerald Scott Klayman               2000.0   \n",
       "113787                  J. Grabowska               1985.0   \n",
       "114951       New York Public Library               2000.0   \n",
       "120274                  Mark Shepard               2000.0   \n",
       "120275  P Ed Varnedoe/Antonelli Kick               2000.0   \n",
       "127311             Publishing Tokuma               1990.0   \n",
       "132065                Kyoko Tsuchiya               1995.0   \n",
       "136842         StanisÂ±aw Ciesielski               1985.0   \n",
       "136844               Jacek Krakowski               1980.0   \n",
       "139928    Oreste, Mr. & Mrs. Vaccari               1990.0   \n",
       "141581                Kenneth J. Hsu               1985.0   \n",
       "146234                Borislav Pekic               1990.0   \n",
       "148602         Algirdas Sabaliauskas               1990.0   \n",
       "\n",
       "                      publisher  \\\n",
       "2886              HarperCollins   \n",
       "11095        First Glance Books   \n",
       "12015                    others   \n",
       "12676                    others   \n",
       "16173                    others   \n",
       "37419                    others   \n",
       "39430                    others   \n",
       "39432                    others   \n",
       "39434                    others   \n",
       "39435                    others   \n",
       "39436                    others   \n",
       "39437                    others   \n",
       "39438                    others   \n",
       "39439                    others   \n",
       "39440                    others   \n",
       "39441                    others   \n",
       "39442                    others   \n",
       "39443                    others   \n",
       "39444                    others   \n",
       "51271                    others   \n",
       "69705              Viking Press   \n",
       "73151                    others   \n",
       "76670                    others   \n",
       "84028                    others   \n",
       "84560                    others   \n",
       "85684                    others   \n",
       "89805                    others   \n",
       "113787                   others   \n",
       "114951               Free Press   \n",
       "120274                   others   \n",
       "120275                   others   \n",
       "127311                   others   \n",
       "132065                   others   \n",
       "136842                   others   \n",
       "136844                   others   \n",
       "139928  French & European Pubns   \n",
       "141581                 Harcourt   \n",
       "146234                   others   \n",
       "148602                   others   \n",
       "\n",
       "                                                  img_url language category  \\\n",
       "2886    http://images.amazon.com/images/P/B0000DAPP1.0...      NaN      NaN   \n",
       "11095   http://images.amazon.com/images/P/5553531144.0...      NaN      NaN   \n",
       "12015   http://images.amazon.com/images/P/8631301663.0...      NaN      NaN   \n",
       "12676   http://images.amazon.com/images/P/8308033555.0...      NaN      NaN   \n",
       "16173   http://images.amazon.com/images/P/B0000633PU.0...      NaN      NaN   \n",
       "37419   http://images.amazon.com/images/P/5415008233.0...      NaN      NaN   \n",
       "39430   http://images.amazon.com/images/P/8303025732.0...      NaN      NaN   \n",
       "39432   http://images.amazon.com/images/P/8320715164.0...      NaN      NaN   \n",
       "39434   http://images.amazon.com/images/P/8321329519.0...      NaN      NaN   \n",
       "39435   http://images.amazon.com/images/P/8321407749.0...      NaN      NaN   \n",
       "39436   http://images.amazon.com/images/P/832140927X.0...      NaN      NaN   \n",
       "39437   http://images.amazon.com/images/P/8321728677.0...      NaN      NaN   \n",
       "39438   http://images.amazon.com/images/P/8322106491.0...      NaN      NaN   \n",
       "39439   http://images.amazon.com/images/P/8370061982.0...      NaN      NaN   \n",
       "39440   http://images.amazon.com/images/P/837023030X.0...      NaN      NaN   \n",
       "39441   http://images.amazon.com/images/P/8370237797.0...      NaN      NaN   \n",
       "39442   http://images.amazon.com/images/P/8370665098.0...      NaN      NaN   \n",
       "39443   http://images.amazon.com/images/P/8385412565.0...      NaN      NaN   \n",
       "39444   http://images.amazon.com/images/P/8385496424.0...      NaN      NaN   \n",
       "51271   http://images.amazon.com/images/P/B00005U7YK.0...      NaN      NaN   \n",
       "69705   http://images.amazon.com/images/P/B0000C2W5U.0...      NaN      NaN   \n",
       "73151   http://images.amazon.com/images/P/8308019188.0...      NaN      NaN   \n",
       "76670   http://images.amazon.com/images/P/8673311373.0...      NaN      NaN   \n",
       "84028   http://images.amazon.com/images/P/2605000214.0...      NaN      NaN   \n",
       "84560   http://images.amazon.com/images/P/8670710110.0...      NaN      NaN   \n",
       "85684   http://images.amazon.com/images/P/8390096420.0...      NaN      NaN   \n",
       "89805   http://images.amazon.com/images/P/7561910908.0...      NaN      NaN   \n",
       "113787  http://images.amazon.com/images/P/8322319851.0...      NaN      NaN   \n",
       "114951  http://images.amazon.com/images/P/B0001I1KOG.0...      NaN      NaN   \n",
       "120274  http://images.amazon.com/images/P/B000092Q0A.0...      NaN      NaN   \n",
       "120275  http://images.amazon.com/images/P/B00013AX9E.0...      NaN      NaN   \n",
       "127311  http://images.amazon.com/images/P/4190869775.0...      NaN      NaN   \n",
       "132065  http://images.amazon.com/images/P/4403660215.0...      NaN      NaN   \n",
       "136842  http://images.amazon.com/images/P/8306013204.0...      NaN      NaN   \n",
       "136844  http://images.amazon.com/images/P/8321803059.0...      NaN      NaN   \n",
       "139928  http://images.amazon.com/images/P/4621027530.0...      NaN      NaN   \n",
       "141581  http://images.amazon.com/images/P/5551776328.0...      NaN      NaN   \n",
       "146234  http://images.amazon.com/images/P/8681283405.0...      NaN      NaN   \n",
       "148602  http://images.amazon.com/images/P/542001226X.0...      NaN      NaN   \n",
       "\n",
       "                                                  summary  \\\n",
       "2886    Discover Your Genius: How to Think Like Histor...   \n",
       "11095                     Human Dignity and Freedom-25.95   \n",
       "12015            Martin protiv CIA-e i KGB-a (Hit junior)   \n",
       "12676                                                 Ono   \n",
       "16173         The Story of Aladdin and the Wonderful Lamp   \n",
       "37419                           Vilniaus pokeris: Romanas   \n",
       "39430                        StanisÂ±aw Ignacy Witkiewicz   \n",
       "39432      Dzienniki (Pisma wybrane / Stefan Kisielewski)   \n",
       "39434                        Jan Matejko (W kregu sztuki)   \n",
       "39435                              Wzory listÃ³w polskich   \n",
       "39436   Kieszonkowy Slownik Angielsk O-Polski Polsko-A...   \n",
       "39437   Warszawski Zamek KrÃ³lewski: Zamek Rzeczypospo...   \n",
       "39438     Tatry: GÃ³ry najpiekniejsze = The Tatra : spell   \n",
       "39439                Fotografie =: Photography, 1980-1989   \n",
       "39440              Ogniem i mieczem w pustyni i w puszczy   \n",
       "39441                Polski Londyn (A to Polska wÂ±asnie)   \n",
       "39442                      Kim pan jest, panie Wachowski?   \n",
       "39443                          Zakopane (DookoÂ±a Polski)   \n",
       "39444                             Pieniny (Krainy piekna)   \n",
       "51271   The New Gurus -- From Sun-Tzu And Jesus To Mac...   \n",
       "69705          Femme Fatale: Famous Beauties Then and Now   \n",
       "73151   Ciemnosc i plesn (Polskie opowiadania wspÃ³Â±c...   \n",
       "76670        Milenina pisma Kafki (Kolekcija \\Semafor\\\")\"   \n",
       "84028   Le surrÃ©alisme, 1919-1939 (Collection La Pein...   \n",
       "84560   Citanka za licemjere: Tanjusna, didakticka sat...   \n",
       "85684            Historia doktryn politycznych i prawnych   \n",
       "89805       Urban Chinese: Mandarin in 21st Century China   \n",
       "113787                                       Polish Amber   \n",
       "114951       New York Public Library Literature Companion   \n",
       "120274  The Community of the Ark: A Visit to the Utopi...   \n",
       "120275  Modern Contemporary: Aspects of Art at MoMA Si...   \n",
       "127311                                 Three d Wonderland   \n",
       "132065                  WeiÃ?Â¿: Assasin and White Shaman   \n",
       "136842  NiepodlegÂ±osc i socjalizm: Tradycja w mysli p...   \n",
       "136844                    Autopsja czyli dziennik kryzysu   \n",
       "139928  Vaccari's Concise English-Japanese Japanese-En...   \n",
       "141581  The Great Dying: A Cosmic Catastrophe Demolish...   \n",
       "146234                         Poslednja pisma iz TuÂ³ine   \n",
       "148602                                      We, the Balts   \n",
       "\n",
       "                                 img_path code    year  \n",
       "2886    images/B0000DAPP1.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "11095   images/5553531144.01.THUMBZZZ.jpg   55  1990.0  \n",
       "12015   images/8631301663.01.THUMBZZZ.jpg   86  1985.0  \n",
       "12676   images/8308033555.01.THUMBZZZ.jpg   83  2000.0  \n",
       "16173   images/B0000633PU.01.THUMBZZZ.jpg   B0  1990.0  \n",
       "37419   images/5415008233.01.THUMBZZZ.jpg   54  1990.0  \n",
       "39430   images/8303025732.01.THUMBZZZ.jpg   83  1985.0  \n",
       "39432   images/8320715164.01.THUMBZZZ.jpg   83  1995.0  \n",
       "39434   images/8321329519.01.THUMBZZZ.jpg   83  1975.0  \n",
       "39435   images/8321407749.01.THUMBZZZ.jpg   83  1990.0  \n",
       "39436   images/832140927X.01.THUMBZZZ.jpg   83  1990.0  \n",
       "39437   images/8321728677.01.THUMBZZZ.jpg   83  1985.0  \n",
       "39438   images/8322106491.01.THUMBZZZ.jpg   83  1990.0  \n",
       "39439   images/8370061982.01.THUMBZZZ.jpg   83  1990.0  \n",
       "39440   images/837023030X.01.THUMBZZZ.jpg   83  1990.0  \n",
       "39441   images/8370237797.01.THUMBZZZ.jpg   83  2000.0  \n",
       "39442   images/8370665098.01.THUMBZZZ.jpg   83  1990.0  \n",
       "39443   images/8385412565.01.THUMBZZZ.jpg   83  1995.0  \n",
       "39444   images/8385496424.01.THUMBZZZ.jpg   83  1995.0  \n",
       "51271   images/B00005U7YK.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "69705   images/B0000C2W5U.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "73151   images/8308019188.01.THUMBZZZ.jpg   83  1985.0  \n",
       "76670   images/8673311373.01.THUMBZZZ.jpg   86  1985.0  \n",
       "84028   images/2605000214.01.THUMBZZZ.jpg   26  1980.0  \n",
       "84560   images/8670710110.01.THUMBZZZ.jpg   86  1985.0  \n",
       "85684   images/8390096420.01.THUMBZZZ.jpg   83  1990.0  \n",
       "89805   images/7561910908.01.THUMBZZZ.jpg   75  2000.0  \n",
       "113787  images/8322319851.01.THUMBZZZ.jpg   83  1985.0  \n",
       "114951  images/B0001I1KOG.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "120274  images/B000092Q0A.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "120275  images/B00013AX9E.01.THUMBZZZ.jpg   B0  2000.0  \n",
       "127311  images/4190869775.01.THUMBZZZ.jpg   41  1990.0  \n",
       "132065  images/4403660215.01.THUMBZZZ.jpg   44  1995.0  \n",
       "136842  images/8306013204.01.THUMBZZZ.jpg   83  1985.0  \n",
       "136844  images/8321803059.01.THUMBZZZ.jpg   83  1980.0  \n",
       "139928  images/4621027530.01.THUMBZZZ.jpg   46  1990.0  \n",
       "141581  images/5551776328.01.THUMBZZZ.jpg   55  1985.0  \n",
       "146234  images/8681283405.01.THUMBZZZ.jpg   86  1990.0  \n",
       "148602  images/542001226X.01.THUMBZZZ.jpg   54  1990.0  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "null_lang = df_book[df_book.language.isna()]\n",
    "author = null_lang.book_author.unique()\n",
    "for a in author :\n",
    "    temp = df_book[df_book.book_author == a]\n",
    "    count = temp['language'].value_counts()\n",
    "    index = temp.index.intersection(null_lang.index)\n",
    "    if len(count.index) >= 1 :\n",
    "        for i in index :\n",
    "            df_book.loc[i, 'language'] = count.index[0]\n",
    "df_book[df_book.language.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f8abae56-3041-4175-979b-0dee091b07d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "      <th>code</th>\n",
       "      <th>year</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [isbn, book_title, book_author, year_of_publication, publisher, img_url, language, category, summary, img_path, code, year]\n",
       "Index: []"
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.language.fillna('unknown', inplace=True)\n",
    "df_book[df_book.language.isna()]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7055cb9e-bc73-434e-bbb7-c490022f0498",
   "metadata": {},
   "source": [
    "### book_author"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "5e86ddb2-174c-4be3-8fcd-21008fc9a39b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "62059"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.book_author.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "b3dc9f9e-dc7c-4a9a-a5f5-7e0985792566",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stephen King 7.267996764626584\n",
      "Agatha Christie 7.344525547445255\n",
      "William Shakespeare 7.802985074626866\n",
      "Barbara Cartland 3.0608695652173914\n",
      "Nora Roberts 7.030277185501066\n",
      "Terry Pratchett 7.802795031055901\n",
      "Isaac Asimov 7.458471760797342\n",
      "Charles Dickens 7.248447204968944\n",
      "Carolyn Keene 7.260377358490566\n",
      "Ann M. Martin 5.7155555555555555\n",
      "Piers Anthony 7.148086522462562\n",
      "Not Applicable (Na ) 7.6647058823529415\n",
      "Marion Zimmer Bradley 7.0136612021857925\n",
      "R. L. Stine 6.004524886877828\n",
      "Jane Austen 7.713472485768501\n",
      "Mary Higgins Clark 6.955489614243324\n",
      "Mark Twain 7.822916666666667\n",
      "Francine Pascal 5.958579881656805\n",
      "J. R. R. Tolkien 8.034261241970022\n",
      "Roald Dahl 7.886046511627907\n"
     ]
    }
   ],
   "source": [
    "top_20 = df_book.book_author.value_counts().index[:20]\n",
    "for t in top_20 :\n",
    "    author = t\n",
    "    isbn = df_book[df_book.book_author == author].isbn.values\n",
    "    ratings = []\n",
    "    for i in isbn :\n",
    "        ratings.extend(df_train[df_train.isbn == i].rating.values)\n",
    "    print(author, np.mean(ratings))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "b9db8a4f-f2e4-4362-add9-52401a683589",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(4156, 211311, 95484)"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "authors = df_year.book_author.value_counts()\n",
    "count = 0\n",
    "coverage = 10\n",
    "data = []\n",
    "for key, value in authors.to_dict().items() :\n",
    "    if value >= coverage :\n",
    "        count += 1\n",
    "        data.append(key)\n",
    "count, sum(authors[:count]), sum(authors[count:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "id": "fea30711-5fbe-401f-ae04-ac2d728f8dc3",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "others                 87702\n",
       "Stephen King             446\n",
       "Agatha Christie          404\n",
       "William Shakespeare      381\n",
       "Barbara Cartland         283\n",
       "                       ...  \n",
       "STEVEN MILLHAUSER          1\n",
       "GAVIN DE BECKER            1\n",
       "Margaret Cho               1\n",
       "HILARY LIFTIN              1\n",
       "Megan McCafferty           1\n",
       "Name: book_author, Length: 4157, dtype: int64"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.book_author = df_book.book_author.apply(lambda x : x if x in data else 'others')\n",
    "df_book.book_author.value_counts()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8e72f70a-cc45-425a-9e03-45f1c694d23a",
   "metadata": {},
   "source": [
    "### category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "id": "49e7a8f4-aab5-4144-9b22-3c941cb9beee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Fiction                                               32956\n",
       "Juvenile Fiction                                       5804\n",
       "Biography & Autobiography                              3320\n",
       "History                                                1925\n",
       "Religion                                               1818\n",
       "                                                      ...  \n",
       "Disguise                                                  1\n",
       "Country lawyers                                           1\n",
       "Humorous stories, Brazilian                               1\n",
       "Coasts                                                    1\n",
       "Authors, Canadian (English) 20th century Biography        1\n",
       "Name: category, Length: 4292, dtype: int64"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "category = df_book.category.value_counts()\n",
    "category.index = category.index.map(lambda x : x[2:-2])\n",
    "category"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "id": "0aab91da-1551-4e6d-9fd1-278d50e03dd7",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4292"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "category.index.nunique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "id": "2cc90259-ae5f-4809-9bb2-36c599e00e4c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0         actresses\n",
       "1         1940-1949\n",
       "2           medical\n",
       "3           fiction\n",
       "4           history\n",
       "            ...    \n",
       "149565        humor\n",
       "149566       nature\n",
       "149567          nan\n",
       "149568      fiction\n",
       "149569          nan\n",
       "Name: category_pre, Length: 149570, dtype: object"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book['category_pre'] = df_book.category.apply(lambda x : x[2:-2] if pd.notnull(x) else str(x))\n",
    "df_book['category_pre'] = df_book['category_pre'].str.lower()\n",
    "df_book['category_pre'] = df_book['category_pre'].apply(lambda x : x.replace('[^a-z0-9- ]', ''))\n",
    "df_book['category_pre'] = df_book['category_pre'].str.replace('  ', ' ')\n",
    "df_book['category_pre']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "id": "39f9cb75-f1fb-433d-acd3-2f35a1d90689",
   "metadata": {
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "nan 68851\n",
      "fiction 33016\n",
      "juvenile fiction 5835\n",
      "biography & autobiography 3326\n",
      "history 1927\n",
      "religion 1818\n",
      "juvenile nonfiction 1418\n",
      "social science 1231\n",
      "humor 1161\n",
      "body, mind & spirit 1113\n",
      "business & economics 1073\n",
      "cooking 1025\n",
      "health & fitness 971\n",
      "family & relationships 963\n",
      "computers 730\n",
      "travel 651\n",
      "self-help 640\n",
      "psychology 635\n",
      "poetry 626\n",
      "science 624\n",
      "art 563\n",
      "literary criticism 561\n",
      "nature 490\n",
      "philosophy 481\n",
      "reference 471\n",
      "drama 459\n",
      "performing arts 457\n",
      "sports & recreation 446\n",
      "political science 431\n",
      "comics & graphic novels 421\n",
      "crafts & hobbies 411\n",
      "language arts & disciplines 395\n",
      "education 339\n",
      "true crime 336\n",
      "music 320\n",
      "pets 306\n",
      "literary collections 283\n",
      "gardening 274\n",
      "detective and mystery stories 256\n",
      "medical 243\n",
      "foreign language study 200\n",
      "children's stories 190\n",
      "house & home 172\n",
      "technology & engineering 161\n",
      "photography 152\n",
      "animals 144\n",
      "adventure stories 132\n",
      "games & activities 128\n",
      "games 125\n",
      "architecture 116\n",
      "american fiction 116\n",
      "law 104\n",
      "antiques & collectibles 97\n",
      "english fiction 93\n",
      "brothers and sisters 84\n",
      "friendship 84\n",
      "english language 83\n",
      "cats 83\n",
      "domestic fiction 83\n",
      "science fiction 80\n",
      "families 71\n",
      "mathematics 69\n",
      "bible 67\n",
      "christian life 65\n",
      "england 65\n",
      "australia 64\n",
      "adolescence 62\n",
      "design 62\n",
      "american poetry 56\n",
      "fantasy fiction 56\n",
      "great britain 56\n",
      "authors, american 52\n",
      "german fiction 52\n",
      "adventure and adventurers 51\n",
      "african americans 49\n",
      "children 49\n",
      "fantasy 47\n",
      "actors 47\n",
      "dogs 46\n",
      "conduct of life 46\n",
      "france 46\n",
      "horror tales 46\n",
      "transportation 44\n",
      "young adult fiction 44\n",
      "murder 41\n",
      "french fiction 41\n",
      "american literature 41\n",
      "adultery 41\n",
      "fairy tales 40\n",
      "city and town life 38\n",
      "brothers 37\n",
      "united states 37\n",
      "bears 36\n",
      "bibles 35\n",
      "canada 35\n",
      "christmas stories 35\n",
      "authors, english 34\n",
      "dinosaurs 34\n",
      "country life 34\n",
      "babysitters 33\n",
      "comic books, strips, etc 32\n",
      "american wit and humor 32\n",
      "africa 32\n",
      "americans 32\n",
      "children's stories, english 31\n",
      "artists 30\n",
      "angels 30\n",
      "fantasy fiction, american 30\n",
      "motion picture actors and actresses 30\n",
      "children's stories, american 29\n",
      "man-woman relationships 29\n",
      "science fiction, american 28\n",
      "christian fiction 27\n",
      "british 27\n",
      "indians of north america 26\n",
      "china 26\n",
      "curiosities and wonders 25\n",
      "crime 25\n",
      "death 25\n",
      "children's literature 24\n",
      "boarding schools 24\n",
      "ghost stories 24\n",
      "american wit and humor, pictorial 24\n",
      "egypt 23\n",
      "english drama 23\n",
      "study aids 23\n",
      "romance fiction 23\n",
      "germany 23\n",
      "child rearing 23\n",
      "arthurian romances 22\n",
      "horror stories. 22\n",
      "boys 22\n",
      "authorship 21\n",
      "children's poetry 21\n",
      "interplanetary voyages 20\n",
      "children's stories, american. 20\n",
      "german language materials 20\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "138"
      ]
     },
     "execution_count": 57,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count = 0\n",
    "coverage = 20\n",
    "for key, value in df_book.category_pre.value_counts().to_dict().items() :\n",
    "    count += 1\n",
    "    if value < coverage :\n",
    "        break\n",
    "    print(key, value)\n",
    "count"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "686ba571-d7f0-4130-baf0-671f9bff2cf3",
   "metadata": {},
   "outputs": [],
   "source": [
    "categories = {\n",
    "    'fiction' : ['fiction'],\n",
    "    'biograph' : ['biography'],\n",
    "    'animals' : ['dog', 'cat', 'pets', 'dinosaurs'],\n",
    "    'games' : ['games'],\n",
    "    'relationships' : ['relationships', 'brother', 'sister', 'friend', 'family', 'families', 'rearing', 'mother', 'dauther'],\n",
    "    'language' : ['language'],\n",
    "    'christian' : ['bible', 'christian'],\n",
    "    'fitness' : ['sports', 'fitness'],\n",
    "    'spirit' : ['spirit'],\n",
    "    'business' : ['business', 'economics'],\n",
    "    'comics' : ['comics', 'comic'],\n",
    "    'literary' : ['literary', 'poetry', 'literature'],\n",
    "    'art' : ['antique'],\n",
    "    'house' : ['house'],\n",
    "    'children' : ['children', 'tales'],\n",
    "    'hobby' : ['hobby', 'hobbies'],\n",
    "    'technology' : ['technology'],\n",
    "    'mystery' : ['mystery'],\n",
    "    'crime' : ['crime', 'criminals', 'murder'],\n",
    "    'humor' : ['humor'],\n",
    "    'horror' : ['horror', 'ghost'],\n",
    "    'cooking' : ['cook'],\n",
    "    'artist' : ['artist', 'actor', 'actress', 'author'],\n",
    "    'drama' : ['drama'],\n",
    "    'adventure' : ['adventure', 'wonder'],\n",
    "    'life' : ['life'],\n",
    "    'computers' : ['computer'],\n",
    "    'christmas' : ['christmas']\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "a69c07d3-c43c-4da1-955d-c36f9e0eecd2",
   "metadata": {},
   "outputs": [],
   "source": [
    "for key, value in categories.items() :\n",
    "    for v in value :\n",
    "        temp = df_book[df_book['category_pre'].apply(lambda x : True if x.find(v) >= 0 else False)]\n",
    "        df_book.loc[temp.index, 'category_pre'] = key"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "id": "4bbe2103-25ac-4286-a9e3-8005a7184da1",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "fiction 41271\n",
      "biograph 3350\n",
      "history 1927\n",
      "religion 1818\n",
      "literary 1803\n",
      "fitness 1425\n",
      "relationships 1388\n",
      "humor 1289\n",
      "social science 1231\n",
      "business 1168\n",
      "spirit 1128\n",
      "cooking 1125\n",
      "animals 1082\n",
      "language 804\n",
      "computers 803\n",
      "art 672\n",
      "travel 651\n",
      "self-help 640\n",
      "psychology 635\n",
      "science 624\n",
      "children 599\n",
      "drama 537\n",
      "nature 490\n",
      "philosophy 481\n",
      "reference 471\n",
      "comics 463\n",
      "performing arts 457\n",
      "crime 455\n",
      "political science 431\n",
      "hobby 411\n",
      "artist 359\n",
      "music 320\n",
      "mystery 293\n",
      "games 275\n",
      "gardening 274\n",
      "medical 243\n",
      "adventure 237\n",
      "christian 219\n",
      "house 204\n",
      "life 176\n",
      "technology 171\n",
      "photography 152\n",
      "architecture 116\n",
      "law 104\n",
      "horror 78\n",
      "mathematics 69\n",
      "england 65\n",
      "australia 64\n",
      "design 62\n",
      "adolescence 62\n",
      "christmas 58\n",
      "great britain 56\n",
      "african americans 49\n",
      "fantasy 47\n",
      "france 46\n",
      "transportation 44\n",
      "adultery 41\n",
      "united states 37\n",
      "bears 36\n",
      "canada 35\n",
      "babysitters 33\n",
      "americans 32\n",
      "africa 32\n",
      "angels 30\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "(66, 142626, 6944)"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "count = 0\n",
    "coverage = 30\n",
    "category_list = []\n",
    "categories = df_book.category_pre.value_counts()\n",
    "for key, value in categories.to_dict().items() :\n",
    "    count += 1\n",
    "    if value < coverage :\n",
    "        break\n",
    "    if key == 'nan' :\n",
    "        continue\n",
    "    category_list.append(key)\n",
    "    print(key, value)\n",
    "count, sum(categories[:count]), sum(categories[count:])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "id": "dc969540-5fb2-4d5a-9433-2a97006e0812",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "others         75822\n",
       "fiction        41271\n",
       "biograph        3350\n",
       "history         1927\n",
       "religion        1818\n",
       "               ...  \n",
       "canada            35\n",
       "babysitters       33\n",
       "africa            32\n",
       "americans         32\n",
       "angels            30\n",
       "Name: category_pre, Length: 65, dtype: int64"
      ]
     },
     "execution_count": 61,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.category_pre = df_book.category_pre.apply(lambda x : x if x in category_list else 'others')\n",
    "df_book.category_pre.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "id": "0fe2492d-af68-4d79-8b7e-156cb73d5939",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_book.category = df_book.category_pre\n",
    "df_book.drop('year', axis=1, inplace=True)\n",
    "df_book.drop('category_pre', axis=1, inplace=True)\n",
    "df_book.drop('code', axis=1, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "d4f387d7-096d-4934-a5b8-41f2691d6943",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>8</td>\n",
       "      <td>timmins, ontario, canada</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>11400</td>\n",
       "      <td>ottawa, ontario, canada</td>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>11676</td>\n",
       "      <td>unknown, unknown, others</td>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>67544</td>\n",
       "      <td>toronto, ontario, canada</td>\n",
       "      <td>30.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>85526</td>\n",
       "      <td>victoria, britishcolumbia, canada</td>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   user_id                           location   age\n",
       "0        8           timmins, ontario, canada  36.0\n",
       "1    11400            ottawa, ontario, canada  49.0\n",
       "2    11676           unknown, unknown, others  37.0\n",
       "3    67544           toronto, ontario, canada  30.0\n",
       "4    85526  victoria, britishcolumbia, canada  36.0"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_user.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "id": "ba1cfd2c-d0b5-47f8-a60f-6059007affb6",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>isbn</th>\n",
       "      <th>book_title</th>\n",
       "      <th>book_author</th>\n",
       "      <th>year_of_publication</th>\n",
       "      <th>publisher</th>\n",
       "      <th>img_url</th>\n",
       "      <th>language</th>\n",
       "      <th>category</th>\n",
       "      <th>summary</th>\n",
       "      <th>img_path</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0002005018</td>\n",
       "      <td>Clara Callan</td>\n",
       "      <td>others</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>HarperFlamingo Canada</td>\n",
       "      <td>http://images.amazon.com/images/P/0002005018.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>artist</td>\n",
       "      <td>In a small town in Canada, Clara Callan reluct...</td>\n",
       "      <td>images/0002005018.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0060973129</td>\n",
       "      <td>Decision in Normandy</td>\n",
       "      <td>others</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>HarperPerennial</td>\n",
       "      <td>http://images.amazon.com/images/P/0060973129.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>others</td>\n",
       "      <td>Here, for the first time in paperback, is an o...</td>\n",
       "      <td>images/0060973129.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0374157065</td>\n",
       "      <td>Flu: The Story of the Great Influenza Pandemic...</td>\n",
       "      <td>others</td>\n",
       "      <td>1995.0</td>\n",
       "      <td>Farrar Straus Giroux</td>\n",
       "      <td>http://images.amazon.com/images/P/0374157065.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>medical</td>\n",
       "      <td>Describes the great flu epidemic of 1918, an o...</td>\n",
       "      <td>images/0374157065.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0399135782</td>\n",
       "      <td>The Kitchen God's Wife</td>\n",
       "      <td>Amy Tan</td>\n",
       "      <td>1990.0</td>\n",
       "      <td>Putnam Pub Group</td>\n",
       "      <td>http://images.amazon.com/images/P/0399135782.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>fiction</td>\n",
       "      <td>A Chinese immigrant who is convinced she is dy...</td>\n",
       "      <td>images/0399135782.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0425176428</td>\n",
       "      <td>What If?: The World's Foremost Military Histor...</td>\n",
       "      <td>others</td>\n",
       "      <td>2000.0</td>\n",
       "      <td>Berkley Publishing Group</td>\n",
       "      <td>http://images.amazon.com/images/P/0425176428.0...</td>\n",
       "      <td>en</td>\n",
       "      <td>history</td>\n",
       "      <td>Essays by respected military historians, inclu...</td>\n",
       "      <td>images/0425176428.01.THUMBZZZ.jpg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         isbn                                         book_title book_author  \\\n",
       "0  0002005018                                       Clara Callan      others   \n",
       "1  0060973129                               Decision in Normandy      others   \n",
       "2  0374157065  Flu: The Story of the Great Influenza Pandemic...      others   \n",
       "3  0399135782                             The Kitchen God's Wife     Amy Tan   \n",
       "4  0425176428  What If?: The World's Foremost Military Histor...      others   \n",
       "\n",
       "   year_of_publication                 publisher  \\\n",
       "0               2000.0     HarperFlamingo Canada   \n",
       "1               1990.0           HarperPerennial   \n",
       "2               1995.0      Farrar Straus Giroux   \n",
       "3               1990.0          Putnam Pub Group   \n",
       "4               2000.0  Berkley Publishing Group   \n",
       "\n",
       "                                             img_url language category  \\\n",
       "0  http://images.amazon.com/images/P/0002005018.0...       en   artist   \n",
       "1  http://images.amazon.com/images/P/0060973129.0...       en   others   \n",
       "2  http://images.amazon.com/images/P/0374157065.0...       en  medical   \n",
       "3  http://images.amazon.com/images/P/0399135782.0...       en  fiction   \n",
       "4  http://images.amazon.com/images/P/0425176428.0...       en  history   \n",
       "\n",
       "                                             summary  \\\n",
       "0  In a small town in Canada, Clara Callan reluct...   \n",
       "1  Here, for the first time in paperback, is an o...   \n",
       "2  Describes the great flu epidemic of 1918, an o...   \n",
       "3  A Chinese immigrant who is convinced she is dy...   \n",
       "4  Essays by respected military historians, inclu...   \n",
       "\n",
       "                            img_path  \n",
       "0  images/0002005018.01.THUMBZZZ.jpg  \n",
       "1  images/0060973129.01.THUMBZZZ.jpg  \n",
       "2  images/0374157065.01.THUMBZZZ.jpg  \n",
       "3  images/0399135782.01.THUMBZZZ.jpg  \n",
       "4  images/0425176428.01.THUMBZZZ.jpg  "
      ]
     },
     "execution_count": 64,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_book.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "f398a651-56ae-483f-ac57-987f19801737",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>user_id</th>\n",
       "      <th>location</th>\n",
       "      <th>age</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [user_id, location, age]\n",
       "Index: []"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "for i in df_user[df_user.location.isna()].index :\n",
    "    df_user.loc[i, 'location'] = 'na, na, na'\n",
    "df_user[df_user.location.isna()]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "id": "ff4505cb-32cb-471a-bd77-08e1fb95079b",
   "metadata": {},
   "outputs": [],
   "source": [
    "df_user.to_csv('data/user.csv', index=False)\n",
    "df_book.to_csv('data/book.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "29e27307-ea42-4aa7-b0e6-f9cc38dd9e4a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  },
  "vscode": {
   "interpreter": {
    "hash": "31f2aee4e71d21fbe5cf8b01ff0e069b9275f58929596ceb00d14d90e3e16cd6"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
